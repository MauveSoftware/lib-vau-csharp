//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 612 // Disable "CS0612 '...' is obsolete"
#pragma warning disable 649 // Disable "CS0649 Field is never assigned to, and will always have its default value null"
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8600 // Disable "CS8600 Converting null literal or possible null value to non-nullable type"
#pragma warning disable 8602 // Disable "CS8602 Dereference of a possibly null reference"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"
#pragma warning disable 8604 // Disable "CS8604 Possible null reference argument for parameter"
#pragma warning disable 8625 // Disable "CS8625 Cannot convert null literal to non-nullable reference type"
#pragma warning disable 8765 // Disable "CS8765 Nullability of type of parameter doesn't match overridden member (possibly because of nullability attributes)."

namespace Mauve.Erezept.API.EpaServiceClients.MedicationService
{
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MedicationServiceClient 
    {
        #pragma warning disable 8618
        private string _baseUrl;
        #pragma warning restore 8618

        private System.Net.Http.HttpClient _httpClient;
        private static System.Lazy<System.Text.Json.JsonSerializerOptions> _settings = new System.Lazy<System.Text.Json.JsonSerializerOptions>(CreateSerializerSettings, true);
        private System.Text.Json.JsonSerializerOptions _instanceSettings;

    #pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        public MedicationServiceClient(System.Net.Http.HttpClient httpClient)
    #pragma warning restore CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        {
            _httpClient = httpClient;
            Initialize();
        }

        private static System.Text.Json.JsonSerializerOptions CreateSerializerSettings()
        {
            var settings = new System.Text.Json.JsonSerializerOptions();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        protected System.Text.Json.JsonSerializerOptions JsonSerializerSettings { get { return _instanceSettings ?? _settings.Value; } }

        static partial void UpdateJsonSerializerSettings(System.Text.Json.JsonSerializerOptions settings);

        partial void Initialize();

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <summary>
        /// Get CapabilityStatement
        /// </summary>
        /// <param name="x_Request_ID">UUID of the request message</param>
        /// <param name="x_insurantid">Health Record Identifier</param>
        /// <param name="x_useragent">user agent information</param>
        /// <param name="accept">The Accept header indicates the format in which the client wishes to receive the FHIR response — supported values are application/fhir+json and application/fhir+xml</param>
        /// <param name="_format">Specify alternative response formats by their MIME-types (when a client is unable acccess accept: header)</param>
        /// <returns>OK</returns>
        /// <exception cref="MedicationServiceException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<object> MetadataAsync(System.Guid? x_Request_ID, string x_insurantid, string x_useragent, Accept? accept, _format? _format)
        {
            return MetadataAsync(x_Request_ID, x_insurantid, x_useragent, accept, _format, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get CapabilityStatement
        /// </summary>
        /// <param name="x_Request_ID">UUID of the request message</param>
        /// <param name="x_insurantid">Health Record Identifier</param>
        /// <param name="x_useragent">user agent information</param>
        /// <param name="accept">The Accept header indicates the format in which the client wishes to receive the FHIR response — supported values are application/fhir+json and application/fhir+xml</param>
        /// <param name="_format">Specify alternative response formats by their MIME-types (when a client is unable acccess accept: header)</param>
        /// <returns>OK</returns>
        /// <exception cref="MedicationServiceException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<object> MetadataAsync(System.Guid? x_Request_ID, string x_insurantid, string x_useragent, Accept? accept, _format? _format, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (x_Request_ID != null)
                        request_.Headers.TryAddWithoutValidation("X-Request-ID", ConvertToString(x_Request_ID, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_insurantid == null)
                        throw new System.ArgumentNullException("x_insurantid");
                    request_.Headers.TryAddWithoutValidation("x-insurantid", ConvertToString(x_insurantid, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_useragent == null)
                        throw new System.ArgumentNullException("x_useragent");
                    request_.Headers.TryAddWithoutValidation("x-useragent", ConvertToString(x_useragent, System.Globalization.CultureInfo.InvariantCulture));

                    if (accept != null)
                        request_.Headers.TryAddWithoutValidation("Accept", ConvertToString(accept, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "epa/medication/api/v1/fhir/metadata"
                    urlBuilder_.Append("epa/medication/api/v1/fhir/metadata");
                    urlBuilder_.Append('?');
                    if (_format != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("_format")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(_format, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new MedicationServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MedicationServiceException("Device registration does not exist", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MedicationServiceException("Health record is in state UNKNOWN or INITIALIZED", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MedicationServiceException("Health record is in state SUSPENDED", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MedicationServiceException("Any other error", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MedicationServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Search for Medication
        /// </summary>
        /// <param name="x_Request_ID">UUID of the request message</param>
        /// <param name="x_insurantid">Health Record Identifier</param>
        /// <param name="x_useragent">user agent information</param>
        /// <param name="accept">The Accept header indicates the format in which the client wishes to receive the FHIR response — supported values are application/fhir+json and application/fhir+xml</param>
        /// <param name="_format">Specify alternative response formats by their MIME-types (when a client is unable acccess accept: header)</param>
        /// <param name="_count">With _count, the client can specify the maximum number of elements to be included on one page of the response. This means the Medication Service limits the result set to this maximum specified number. If no value for _count is provided, the default value set is 25.</param>
        /// <param name="_offset">This URL parameter indicates the (zero-based) offset of the first returned element in the collection. If no value for _offset is provided, the default value set is 0.</param>
        /// <param name="_total">This parameter controls whether and how the AuditEvent Service returns the total number of search results.</param>
        /// <param name="_revinclude">Reverse include other resources</param>
        /// <param name="_id">Resource.id</param>
        /// <param name="_lastUpdated">Resource.meta.lastUpdated</param>
        /// <param name="identifier">Medication.identifier</param>
        /// <param name="code">Medication.code</param>
        /// <param name="status">Medication.status</param>
        /// <param name="ingredient_code">Medication.ingredient.item as CodeableConcept</param>
        /// <returns>Search successful</returns>
        /// <exception cref="MedicationServiceException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<object> MedicationAsync(System.Guid? x_Request_ID, string x_insurantid, string x_useragent, Accept2? accept, _format2? _format, string _count, int? _offset, string _total, string _revinclude, string _id, System.DateTime? _lastUpdated, string identifier, string code, string status, string ingredient_code)
        {
            return MedicationAsync(x_Request_ID, x_insurantid, x_useragent, accept, _format, _count, _offset, _total, _revinclude, _id, _lastUpdated, identifier, code, status, ingredient_code, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Search for Medication
        /// </summary>
        /// <param name="x_Request_ID">UUID of the request message</param>
        /// <param name="x_insurantid">Health Record Identifier</param>
        /// <param name="x_useragent">user agent information</param>
        /// <param name="accept">The Accept header indicates the format in which the client wishes to receive the FHIR response — supported values are application/fhir+json and application/fhir+xml</param>
        /// <param name="_format">Specify alternative response formats by their MIME-types (when a client is unable acccess accept: header)</param>
        /// <param name="_count">With _count, the client can specify the maximum number of elements to be included on one page of the response. This means the Medication Service limits the result set to this maximum specified number. If no value for _count is provided, the default value set is 25.</param>
        /// <param name="_offset">This URL parameter indicates the (zero-based) offset of the first returned element in the collection. If no value for _offset is provided, the default value set is 0.</param>
        /// <param name="_total">This parameter controls whether and how the AuditEvent Service returns the total number of search results.</param>
        /// <param name="_revinclude">Reverse include other resources</param>
        /// <param name="_id">Resource.id</param>
        /// <param name="_lastUpdated">Resource.meta.lastUpdated</param>
        /// <param name="identifier">Medication.identifier</param>
        /// <param name="code">Medication.code</param>
        /// <param name="status">Medication.status</param>
        /// <param name="ingredient_code">Medication.ingredient.item as CodeableConcept</param>
        /// <returns>Search successful</returns>
        /// <exception cref="MedicationServiceException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<object> MedicationAsync(System.Guid? x_Request_ID, string x_insurantid, string x_useragent, Accept2? accept, _format2? _format, string _count, int? _offset, string _total, string _revinclude, string _id, System.DateTime? _lastUpdated, string identifier, string code, string status, string ingredient_code, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (x_Request_ID != null)
                        request_.Headers.TryAddWithoutValidation("X-Request-ID", ConvertToString(x_Request_ID, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_insurantid == null)
                        throw new System.ArgumentNullException("x_insurantid");
                    request_.Headers.TryAddWithoutValidation("x-insurantid", ConvertToString(x_insurantid, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_useragent == null)
                        throw new System.ArgumentNullException("x_useragent");
                    request_.Headers.TryAddWithoutValidation("x-useragent", ConvertToString(x_useragent, System.Globalization.CultureInfo.InvariantCulture));

                    if (accept != null)
                        request_.Headers.TryAddWithoutValidation("Accept", ConvertToString(accept, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "epa/medication/api/v1/fhir/Medication"
                    urlBuilder_.Append("epa/medication/api/v1/fhir/Medication");
                    urlBuilder_.Append('?');
                    if (_format != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("_format")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(_format, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (_count != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("_count")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(_count, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (_offset != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("_offset")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(_offset, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (_total != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("_total")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(_total, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (_revinclude != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("_revinclude")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(_revinclude, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (_id != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("_id")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(_id, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (_lastUpdated != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("_lastUpdated")).Append('=').Append(System.Uri.EscapeDataString(_lastUpdated.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (identifier != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("identifier")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(identifier, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (code != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("code")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(code, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (status != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("status")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(status, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (ingredient_code != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("ingredient-code")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(ingredient_code, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new MedicationServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MedicationServiceException("Invalid query parameter(s)", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MedicationServiceException("Health record is in state UNKNOWN or INITIALIZED", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 423)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MedicationServiceException("If the insurant objected to the medication process or objected to the submission of prescription and dispensation data into the ePA system, the Medication Service is locked.", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MedicationServiceException("Device registration does not exist", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MedicationServiceException("Health record is in state SUSPENDED", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MedicationServiceException("Any other error", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MedicationServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// History for all Medication
        /// </summary>
        /// <param name="x_Request_ID">UUID of the request message</param>
        /// <param name="x_insurantid">Health Record Identifier</param>
        /// <param name="x_useragent">user agent information</param>
        /// <param name="_count">With _count, the client can specify the maximum number of elements to be included on one page of the response. This means the Medication Service limits the result set to this maximum specified number. If no value for _count is provided, the default value set is 25.</param>
        /// <param name="_offset">This URL parameter indicates the (zero-based) offset of the first returned element in the collection. If no value for _offset is provided, the default value set is 0.</param>
        /// <param name="_total">This parameter controls whether and how the AuditEvent Service returns the total number of search results.</param>
        /// <param name="accept">The Accept header indicates the format in which the client wishes to receive the FHIR response — supported values are application/fhir+json and application/fhir+xml</param>
        /// <param name="_format">Specify alternative response formats by their MIME-types (when a client is unable acccess accept: header)</param>
        /// <returns>History for type retrieved</returns>
        /// <exception cref="MedicationServiceException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<object> HistoryAsync(System.Guid? x_Request_ID, string x_insurantid, string x_useragent, string _count, int? _offset, string _total, Accept3? accept, _format3? _format)
        {
            return HistoryAsync(x_Request_ID, x_insurantid, x_useragent, _count, _offset, _total, accept, _format, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// History for all Medication
        /// </summary>
        /// <param name="x_Request_ID">UUID of the request message</param>
        /// <param name="x_insurantid">Health Record Identifier</param>
        /// <param name="x_useragent">user agent information</param>
        /// <param name="_count">With _count, the client can specify the maximum number of elements to be included on one page of the response. This means the Medication Service limits the result set to this maximum specified number. If no value for _count is provided, the default value set is 25.</param>
        /// <param name="_offset">This URL parameter indicates the (zero-based) offset of the first returned element in the collection. If no value for _offset is provided, the default value set is 0.</param>
        /// <param name="_total">This parameter controls whether and how the AuditEvent Service returns the total number of search results.</param>
        /// <param name="accept">The Accept header indicates the format in which the client wishes to receive the FHIR response — supported values are application/fhir+json and application/fhir+xml</param>
        /// <param name="_format">Specify alternative response formats by their MIME-types (when a client is unable acccess accept: header)</param>
        /// <returns>History for type retrieved</returns>
        /// <exception cref="MedicationServiceException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<object> HistoryAsync(System.Guid? x_Request_ID, string x_insurantid, string x_useragent, string _count, int? _offset, string _total, Accept3? accept, _format3? _format, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (x_Request_ID != null)
                        request_.Headers.TryAddWithoutValidation("X-Request-ID", ConvertToString(x_Request_ID, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_insurantid == null)
                        throw new System.ArgumentNullException("x_insurantid");
                    request_.Headers.TryAddWithoutValidation("x-insurantid", ConvertToString(x_insurantid, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_useragent == null)
                        throw new System.ArgumentNullException("x_useragent");
                    request_.Headers.TryAddWithoutValidation("x-useragent", ConvertToString(x_useragent, System.Globalization.CultureInfo.InvariantCulture));

                    if (accept != null)
                        request_.Headers.TryAddWithoutValidation("Accept", ConvertToString(accept, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "epa/medication/api/v1/fhir/Medication/_history"
                    urlBuilder_.Append("epa/medication/api/v1/fhir/Medication/_history");
                    urlBuilder_.Append('?');
                    if (_count != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("_count")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(_count, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (_offset != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("_offset")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(_offset, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (_total != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("_total")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(_total, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (_format != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("_format")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(_format, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new MedicationServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MedicationServiceException("Invalid request", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MedicationServiceException("Health record is in state UNKNOWN or INITIALIZED", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 423)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MedicationServiceException("If the insurant objected to the medication process or objected to the submission of prescription and dispensation data into the ePA system, the Medication Service is locked.", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MedicationServiceException("Device registration does not exist", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MedicationServiceException("Health record is in state SUSPENDED", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MedicationServiceException("Any other error", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MedicationServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Read a specific Medication
        /// </summary>
        /// <param name="x_Request_ID">UUID of the request message</param>
        /// <param name="x_insurantid">Health Record Identifier</param>
        /// <param name="x_useragent">user agent information</param>
        /// <param name="id">Resource ID</param>
        /// <param name="accept">The Accept header indicates the format in which the client wishes to receive the FHIR response — supported values are application/fhir+json and application/fhir+xml</param>
        /// <param name="_format">Specify alternative response formats by their MIME-types (when a client is unable acccess accept: header)</param>
        /// <returns>Medication successfully read</returns>
        /// <exception cref="MedicationServiceException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<object> Medication2Async(System.Guid? x_Request_ID, string x_insurantid, string x_useragent, string id, Accept4? accept, _format4? _format)
        {
            return Medication2Async(x_Request_ID, x_insurantid, x_useragent, id, accept, _format, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Read a specific Medication
        /// </summary>
        /// <param name="x_Request_ID">UUID of the request message</param>
        /// <param name="x_insurantid">Health Record Identifier</param>
        /// <param name="x_useragent">user agent information</param>
        /// <param name="id">Resource ID</param>
        /// <param name="accept">The Accept header indicates the format in which the client wishes to receive the FHIR response — supported values are application/fhir+json and application/fhir+xml</param>
        /// <param name="_format">Specify alternative response formats by their MIME-types (when a client is unable acccess accept: header)</param>
        /// <returns>Medication successfully read</returns>
        /// <exception cref="MedicationServiceException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<object> Medication2Async(System.Guid? x_Request_ID, string x_insurantid, string x_useragent, string id, Accept4? accept, _format4? _format, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (x_Request_ID != null)
                        request_.Headers.TryAddWithoutValidation("X-Request-ID", ConvertToString(x_Request_ID, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_insurantid == null)
                        throw new System.ArgumentNullException("x_insurantid");
                    request_.Headers.TryAddWithoutValidation("x-insurantid", ConvertToString(x_insurantid, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_useragent == null)
                        throw new System.ArgumentNullException("x_useragent");
                    request_.Headers.TryAddWithoutValidation("x-useragent", ConvertToString(x_useragent, System.Globalization.CultureInfo.InvariantCulture));

                    if (accept != null)
                        request_.Headers.TryAddWithoutValidation("Accept", ConvertToString(accept, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "epa/medication/api/v1/fhir/Medication/{id}"
                    urlBuilder_.Append("epa/medication/api/v1/fhir/Medication/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('?');
                    if (_format != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("_format")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(_format, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new MedicationServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MedicationServiceException("Invalid request", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MedicationServiceException("Health record is in state UNKNOWN or INITIALIZED", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 410)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MedicationServiceException("Resource was deleted", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 423)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MedicationServiceException("If the insurant objected to the medication process or objected to the submission of prescription and dispensation data into the ePA system, the Medication Service is locked.", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MedicationServiceException("Device registration does not exist", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MedicationServiceException("Health record is in state SUSPENDED", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MedicationServiceException("Any other error", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MedicationServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// History of a specific Medication
        /// </summary>
        /// <param name="x_Request_ID">UUID of the request message</param>
        /// <param name="x_insurantid">Health Record Identifier</param>
        /// <param name="x_useragent">user agent information</param>
        /// <param name="id">Resource ID</param>
        /// <param name="accept">The Accept header indicates the format in which the client wishes to receive the FHIR response — supported values are application/fhir+json and application/fhir+xml</param>
        /// <param name="_format">Specify alternative response formats by their MIME-types (when a client is unable acccess accept: header)</param>
        /// <param name="_count">With _count, the client can specify the maximum number of elements to be included on one page of the response. This means the Medication Service limits the result set to this maximum specified number. If no value for _count is provided, the default value set is 25.</param>
        /// <param name="_offset">This URL parameter indicates the (zero-based) offset of the first returned element in the collection. If no value for _offset is provided, the default value set is 0.</param>
        /// <param name="_total">This parameter controls whether and how the AuditEvent Service returns the total number of search results.</param>
        /// <returns>History retrieved</returns>
        /// <exception cref="MedicationServiceException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<object> History2Async(System.Guid? x_Request_ID, string x_insurantid, string x_useragent, string id, Accept5? accept, _format5? _format, string _count, int? _offset, string _total)
        {
            return History2Async(x_Request_ID, x_insurantid, x_useragent, id, accept, _format, _count, _offset, _total, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// History of a specific Medication
        /// </summary>
        /// <param name="x_Request_ID">UUID of the request message</param>
        /// <param name="x_insurantid">Health Record Identifier</param>
        /// <param name="x_useragent">user agent information</param>
        /// <param name="id">Resource ID</param>
        /// <param name="accept">The Accept header indicates the format in which the client wishes to receive the FHIR response — supported values are application/fhir+json and application/fhir+xml</param>
        /// <param name="_format">Specify alternative response formats by their MIME-types (when a client is unable acccess accept: header)</param>
        /// <param name="_count">With _count, the client can specify the maximum number of elements to be included on one page of the response. This means the Medication Service limits the result set to this maximum specified number. If no value for _count is provided, the default value set is 25.</param>
        /// <param name="_offset">This URL parameter indicates the (zero-based) offset of the first returned element in the collection. If no value for _offset is provided, the default value set is 0.</param>
        /// <param name="_total">This parameter controls whether and how the AuditEvent Service returns the total number of search results.</param>
        /// <returns>History retrieved</returns>
        /// <exception cref="MedicationServiceException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<object> History2Async(System.Guid? x_Request_ID, string x_insurantid, string x_useragent, string id, Accept5? accept, _format5? _format, string _count, int? _offset, string _total, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (x_Request_ID != null)
                        request_.Headers.TryAddWithoutValidation("X-Request-ID", ConvertToString(x_Request_ID, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_insurantid == null)
                        throw new System.ArgumentNullException("x_insurantid");
                    request_.Headers.TryAddWithoutValidation("x-insurantid", ConvertToString(x_insurantid, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_useragent == null)
                        throw new System.ArgumentNullException("x_useragent");
                    request_.Headers.TryAddWithoutValidation("x-useragent", ConvertToString(x_useragent, System.Globalization.CultureInfo.InvariantCulture));

                    if (accept != null)
                        request_.Headers.TryAddWithoutValidation("Accept", ConvertToString(accept, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "epa/medication/api/v1/fhir/Medication/{id}/_history"
                    urlBuilder_.Append("epa/medication/api/v1/fhir/Medication/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/_history");
                    urlBuilder_.Append('?');
                    if (_format != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("_format")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(_format, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (_count != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("_count")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(_count, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (_offset != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("_offset")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(_offset, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (_total != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("_total")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(_total, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new MedicationServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MedicationServiceException("Invalid request", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MedicationServiceException("Health record is in state UNKNOWN or INITIALIZED", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 410)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MedicationServiceException("Resource was deleted", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 423)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MedicationServiceException("If the insurant objected to the medication process or objected to the submission of prescription and dispensation data into the ePA system, the Medication Service is locked.", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MedicationServiceException("Device registration does not exist", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MedicationServiceException("Health record is in state SUSPENDED", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MedicationServiceException("Any other error", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MedicationServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Read version of Medication
        /// </summary>
        /// <param name="x_Request_ID">UUID of the request message</param>
        /// <param name="x_insurantid">Health Record Identifier</param>
        /// <param name="x_useragent">user agent information</param>
        /// <param name="id">Resource ID</param>
        /// <param name="vid">Version ID</param>
        /// <param name="accept">The Accept header indicates the format in which the client wishes to receive the FHIR response — supported values are application/fhir+json and application/fhir+xml</param>
        /// <param name="_format">Specify alternative response formats by their MIME-types (when a client is unable acccess accept: header)</param>
        /// <returns>Medication version read</returns>
        /// <exception cref="MedicationServiceException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<object> History3Async(System.Guid? x_Request_ID, string x_insurantid, string x_useragent, string id, string vid, Accept6? accept, _format6? _format)
        {
            return History3Async(x_Request_ID, x_insurantid, x_useragent, id, vid, accept, _format, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Read version of Medication
        /// </summary>
        /// <param name="x_Request_ID">UUID of the request message</param>
        /// <param name="x_insurantid">Health Record Identifier</param>
        /// <param name="x_useragent">user agent information</param>
        /// <param name="id">Resource ID</param>
        /// <param name="vid">Version ID</param>
        /// <param name="accept">The Accept header indicates the format in which the client wishes to receive the FHIR response — supported values are application/fhir+json and application/fhir+xml</param>
        /// <param name="_format">Specify alternative response formats by their MIME-types (when a client is unable acccess accept: header)</param>
        /// <returns>Medication version read</returns>
        /// <exception cref="MedicationServiceException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<object> History3Async(System.Guid? x_Request_ID, string x_insurantid, string x_useragent, string id, string vid, Accept6? accept, _format6? _format, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            if (vid == null)
                throw new System.ArgumentNullException("vid");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (x_Request_ID != null)
                        request_.Headers.TryAddWithoutValidation("X-Request-ID", ConvertToString(x_Request_ID, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_insurantid == null)
                        throw new System.ArgumentNullException("x_insurantid");
                    request_.Headers.TryAddWithoutValidation("x-insurantid", ConvertToString(x_insurantid, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_useragent == null)
                        throw new System.ArgumentNullException("x_useragent");
                    request_.Headers.TryAddWithoutValidation("x-useragent", ConvertToString(x_useragent, System.Globalization.CultureInfo.InvariantCulture));

                    if (accept != null)
                        request_.Headers.TryAddWithoutValidation("Accept", ConvertToString(accept, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "epa/medication/api/v1/fhir/Medication/{id}/_history/{vid}"
                    urlBuilder_.Append("epa/medication/api/v1/fhir/Medication/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/_history/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(vid, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('?');
                    if (_format != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("_format")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(_format, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new MedicationServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MedicationServiceException("Invalid request", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MedicationServiceException("Health record is in state UNKNOWN or INITIALIZED", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 410)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MedicationServiceException("Resource was deleted", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 423)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MedicationServiceException("If the insurant objected to the medication process or objected to the submission of prescription and dispensation data into the ePA system, the Medication Service is locked.", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MedicationServiceException("Device registration does not exist", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MedicationServiceException("Health record is in state SUSPENDED", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MedicationServiceException("Any other error", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MedicationServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Search for MedicationRequest
        /// </summary>
        /// <param name="x_Request_ID">UUID of the request message</param>
        /// <param name="x_insurantid">Health Record Identifier</param>
        /// <param name="x_useragent">user agent information</param>
        /// <param name="accept">The Accept header indicates the format in which the client wishes to receive the FHIR response — supported values are application/fhir+json and application/fhir+xml</param>
        /// <param name="_format">Specify alternative response formats by their MIME-types (when a client is unable acccess accept: header)</param>
        /// <param name="_count">With _count, the client can specify the maximum number of elements to be included on one page of the response. This means the Medication Service limits the result set to this maximum specified number. If no value for _count is provided, the default value set is 25.</param>
        /// <param name="_offset">This URL parameter indicates the (zero-based) offset of the first returned element in the collection. If no value for _offset is provided, the default value set is 0.</param>
        /// <param name="_total">This parameter controls whether and how the AuditEvent Service returns the total number of search results.</param>
        /// <param name="_include">Including other resources</param>
        /// <param name="_revinclude">Reverse include other resources</param>
        /// <param name="_id">Resource.id</param>
        /// <param name="_lastUpdated">Resource.meta.lastUpdated</param>
        /// <param name="identifier">MedicationRequest.identifier</param>
        /// <param name="authoredon">MedicationRequest.authoredOn</param>
        /// <param name="status">MedicationRequest.status</param>
        /// <param name="requester">MedicationRequest.requester</param>
        /// <param name="medication">MedicationRequest.medication as Reference</param>
        /// <returns>Search successful</returns>
        /// <exception cref="MedicationServiceException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<object> MedicationRequestAsync(System.Guid? x_Request_ID, string x_insurantid, string x_useragent, Accept7? accept, _format7? _format, string _count, int? _offset, string _total, string _include, string _revinclude, string _id, System.DateTime? _lastUpdated, string identifier, System.DateTime? authoredon, string status, System.Uri requester, System.Uri medication)
        {
            return MedicationRequestAsync(x_Request_ID, x_insurantid, x_useragent, accept, _format, _count, _offset, _total, _include, _revinclude, _id, _lastUpdated, identifier, authoredon, status, requester, medication, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Search for MedicationRequest
        /// </summary>
        /// <param name="x_Request_ID">UUID of the request message</param>
        /// <param name="x_insurantid">Health Record Identifier</param>
        /// <param name="x_useragent">user agent information</param>
        /// <param name="accept">The Accept header indicates the format in which the client wishes to receive the FHIR response — supported values are application/fhir+json and application/fhir+xml</param>
        /// <param name="_format">Specify alternative response formats by their MIME-types (when a client is unable acccess accept: header)</param>
        /// <param name="_count">With _count, the client can specify the maximum number of elements to be included on one page of the response. This means the Medication Service limits the result set to this maximum specified number. If no value for _count is provided, the default value set is 25.</param>
        /// <param name="_offset">This URL parameter indicates the (zero-based) offset of the first returned element in the collection. If no value for _offset is provided, the default value set is 0.</param>
        /// <param name="_total">This parameter controls whether and how the AuditEvent Service returns the total number of search results.</param>
        /// <param name="_include">Including other resources</param>
        /// <param name="_revinclude">Reverse include other resources</param>
        /// <param name="_id">Resource.id</param>
        /// <param name="_lastUpdated">Resource.meta.lastUpdated</param>
        /// <param name="identifier">MedicationRequest.identifier</param>
        /// <param name="authoredon">MedicationRequest.authoredOn</param>
        /// <param name="status">MedicationRequest.status</param>
        /// <param name="requester">MedicationRequest.requester</param>
        /// <param name="medication">MedicationRequest.medication as Reference</param>
        /// <returns>Search successful</returns>
        /// <exception cref="MedicationServiceException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<object> MedicationRequestAsync(System.Guid? x_Request_ID, string x_insurantid, string x_useragent, Accept7? accept, _format7? _format, string _count, int? _offset, string _total, string _include, string _revinclude, string _id, System.DateTime? _lastUpdated, string identifier, System.DateTime? authoredon, string status, System.Uri requester, System.Uri medication, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (x_Request_ID != null)
                        request_.Headers.TryAddWithoutValidation("X-Request-ID", ConvertToString(x_Request_ID, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_insurantid == null)
                        throw new System.ArgumentNullException("x_insurantid");
                    request_.Headers.TryAddWithoutValidation("x-insurantid", ConvertToString(x_insurantid, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_useragent == null)
                        throw new System.ArgumentNullException("x_useragent");
                    request_.Headers.TryAddWithoutValidation("x-useragent", ConvertToString(x_useragent, System.Globalization.CultureInfo.InvariantCulture));

                    if (accept != null)
                        request_.Headers.TryAddWithoutValidation("Accept", ConvertToString(accept, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "epa/medication/api/v1/fhir/MedicationRequest"
                    urlBuilder_.Append("epa/medication/api/v1/fhir/MedicationRequest");
                    urlBuilder_.Append('?');
                    if (_format != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("_format")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(_format, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (_count != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("_count")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(_count, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (_offset != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("_offset")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(_offset, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (_total != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("_total")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(_total, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (_include != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("_include")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(_include, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (_revinclude != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("_revinclude")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(_revinclude, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (_id != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("_id")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(_id, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (_lastUpdated != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("_lastUpdated")).Append('=').Append(System.Uri.EscapeDataString(_lastUpdated.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (identifier != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("identifier")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(identifier, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (authoredon != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("authoredon")).Append('=').Append(System.Uri.EscapeDataString(authoredon.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (status != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("status")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(status, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (requester != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("requester")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(requester, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (medication != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("medication")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(medication, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new MedicationServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MedicationServiceException("Invalid query parameter(s)", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MedicationServiceException("Health record is in state UNKNOWN or INITIALIZED", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 423)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MedicationServiceException("If the insurant objected to the medication process or objected to the submission of prescription and dispensation data into the ePA system, the Medication Service is locked.", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MedicationServiceException("Device registration does not exist", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MedicationServiceException("Health record is in state SUSPENDED", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MedicationServiceException("Any other error", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MedicationServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// History for all MedicationRequest
        /// </summary>
        /// <param name="x_Request_ID">UUID of the request message</param>
        /// <param name="x_insurantid">Health Record Identifier</param>
        /// <param name="x_useragent">user agent information</param>
        /// <param name="_count">With _count, the client can specify the maximum number of elements to be included on one page of the response. This means the Medication Service limits the result set to this maximum specified number. If no value for _count is provided, the default value set is 25.</param>
        /// <param name="_offset">This URL parameter indicates the (zero-based) offset of the first returned element in the collection. If no value for _offset is provided, the default value set is 0.</param>
        /// <param name="_total">This parameter controls whether and how the AuditEvent Service returns the total number of search results.</param>
        /// <param name="accept">The Accept header indicates the format in which the client wishes to receive the FHIR response — supported values are application/fhir+json and application/fhir+xml</param>
        /// <param name="_format">Specify alternative response formats by their MIME-types (when a client is unable acccess accept: header)</param>
        /// <returns>History for type retrieved</returns>
        /// <exception cref="MedicationServiceException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<object> History4Async(System.Guid? x_Request_ID, string x_insurantid, string x_useragent, string _count, int? _offset, string _total, Accept8? accept, _format8? _format)
        {
            return History4Async(x_Request_ID, x_insurantid, x_useragent, _count, _offset, _total, accept, _format, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// History for all MedicationRequest
        /// </summary>
        /// <param name="x_Request_ID">UUID of the request message</param>
        /// <param name="x_insurantid">Health Record Identifier</param>
        /// <param name="x_useragent">user agent information</param>
        /// <param name="_count">With _count, the client can specify the maximum number of elements to be included on one page of the response. This means the Medication Service limits the result set to this maximum specified number. If no value for _count is provided, the default value set is 25.</param>
        /// <param name="_offset">This URL parameter indicates the (zero-based) offset of the first returned element in the collection. If no value for _offset is provided, the default value set is 0.</param>
        /// <param name="_total">This parameter controls whether and how the AuditEvent Service returns the total number of search results.</param>
        /// <param name="accept">The Accept header indicates the format in which the client wishes to receive the FHIR response — supported values are application/fhir+json and application/fhir+xml</param>
        /// <param name="_format">Specify alternative response formats by their MIME-types (when a client is unable acccess accept: header)</param>
        /// <returns>History for type retrieved</returns>
        /// <exception cref="MedicationServiceException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<object> History4Async(System.Guid? x_Request_ID, string x_insurantid, string x_useragent, string _count, int? _offset, string _total, Accept8? accept, _format8? _format, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (x_Request_ID != null)
                        request_.Headers.TryAddWithoutValidation("X-Request-ID", ConvertToString(x_Request_ID, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_insurantid == null)
                        throw new System.ArgumentNullException("x_insurantid");
                    request_.Headers.TryAddWithoutValidation("x-insurantid", ConvertToString(x_insurantid, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_useragent == null)
                        throw new System.ArgumentNullException("x_useragent");
                    request_.Headers.TryAddWithoutValidation("x-useragent", ConvertToString(x_useragent, System.Globalization.CultureInfo.InvariantCulture));

                    if (accept != null)
                        request_.Headers.TryAddWithoutValidation("Accept", ConvertToString(accept, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "epa/medication/api/v1/fhir/MedicationRequest/_history"
                    urlBuilder_.Append("epa/medication/api/v1/fhir/MedicationRequest/_history");
                    urlBuilder_.Append('?');
                    if (_count != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("_count")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(_count, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (_offset != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("_offset")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(_offset, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (_total != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("_total")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(_total, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (_format != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("_format")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(_format, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new MedicationServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MedicationServiceException("Invalid request", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MedicationServiceException("Health record is in state UNKNOWN or INITIALIZED", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 423)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MedicationServiceException("If the insurant objected to the medication process or objected to the submission of prescription and dispensation data into the ePA system, the Medication Service is locked.", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MedicationServiceException("Device registration does not exist", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MedicationServiceException("Health record is in state SUSPENDED", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MedicationServiceException("Any other error", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MedicationServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Read a specific MedicationRequest
        /// </summary>
        /// <param name="x_Request_ID">UUID of the request message</param>
        /// <param name="x_insurantid">Health Record Identifier</param>
        /// <param name="x_useragent">user agent information</param>
        /// <param name="id">Resource ID</param>
        /// <param name="accept">The Accept header indicates the format in which the client wishes to receive the FHIR response — supported values are application/fhir+json and application/fhir+xml</param>
        /// <param name="_format">Specify alternative response formats by their MIME-types (when a client is unable acccess accept: header)</param>
        /// <returns>MedicationRequest successfully read</returns>
        /// <exception cref="MedicationServiceException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<object> MedicationRequest2Async(System.Guid? x_Request_ID, string x_insurantid, string x_useragent, string id, Accept9? accept, _format9? _format)
        {
            return MedicationRequest2Async(x_Request_ID, x_insurantid, x_useragent, id, accept, _format, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Read a specific MedicationRequest
        /// </summary>
        /// <param name="x_Request_ID">UUID of the request message</param>
        /// <param name="x_insurantid">Health Record Identifier</param>
        /// <param name="x_useragent">user agent information</param>
        /// <param name="id">Resource ID</param>
        /// <param name="accept">The Accept header indicates the format in which the client wishes to receive the FHIR response — supported values are application/fhir+json and application/fhir+xml</param>
        /// <param name="_format">Specify alternative response formats by their MIME-types (when a client is unable acccess accept: header)</param>
        /// <returns>MedicationRequest successfully read</returns>
        /// <exception cref="MedicationServiceException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<object> MedicationRequest2Async(System.Guid? x_Request_ID, string x_insurantid, string x_useragent, string id, Accept9? accept, _format9? _format, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (x_Request_ID != null)
                        request_.Headers.TryAddWithoutValidation("X-Request-ID", ConvertToString(x_Request_ID, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_insurantid == null)
                        throw new System.ArgumentNullException("x_insurantid");
                    request_.Headers.TryAddWithoutValidation("x-insurantid", ConvertToString(x_insurantid, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_useragent == null)
                        throw new System.ArgumentNullException("x_useragent");
                    request_.Headers.TryAddWithoutValidation("x-useragent", ConvertToString(x_useragent, System.Globalization.CultureInfo.InvariantCulture));

                    if (accept != null)
                        request_.Headers.TryAddWithoutValidation("Accept", ConvertToString(accept, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "epa/medication/api/v1/fhir/MedicationRequest/{id}"
                    urlBuilder_.Append("epa/medication/api/v1/fhir/MedicationRequest/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('?');
                    if (_format != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("_format")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(_format, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new MedicationServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MedicationServiceException("Invalid request", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MedicationServiceException("Health record is in state UNKNOWN or INITIALIZED", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 410)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MedicationServiceException("Resource was deleted", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 423)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MedicationServiceException("If the insurant objected to the medication process or objected to the submission of prescription and dispensation data into the ePA system, the Medication Service is locked.", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MedicationServiceException("Device registration does not exist", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MedicationServiceException("Health record is in state SUSPENDED", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MedicationServiceException("Any other error", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MedicationServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// History of a specific MedicationRequest
        /// </summary>
        /// <param name="x_Request_ID">UUID of the request message</param>
        /// <param name="x_insurantid">Health Record Identifier</param>
        /// <param name="x_useragent">user agent information</param>
        /// <param name="id">Resource ID</param>
        /// <param name="accept">The Accept header indicates the format in which the client wishes to receive the FHIR response — supported values are application/fhir+json and application/fhir+xml</param>
        /// <param name="_format">Specify alternative response formats by their MIME-types (when a client is unable acccess accept: header)</param>
        /// <param name="_count">With _count, the client can specify the maximum number of elements to be included on one page of the response. This means the Medication Service limits the result set to this maximum specified number. If no value for _count is provided, the default value set is 25.</param>
        /// <param name="_offset">This URL parameter indicates the (zero-based) offset of the first returned element in the collection. If no value for _offset is provided, the default value set is 0.</param>
        /// <param name="_total">This parameter controls whether and how the AuditEvent Service returns the total number of search results.</param>
        /// <returns>History retrieved</returns>
        /// <exception cref="MedicationServiceException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<object> History5Async(System.Guid? x_Request_ID, string x_insurantid, string x_useragent, string id, Accept10? accept, _format10? _format, string _count, int? _offset, string _total)
        {
            return History5Async(x_Request_ID, x_insurantid, x_useragent, id, accept, _format, _count, _offset, _total, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// History of a specific MedicationRequest
        /// </summary>
        /// <param name="x_Request_ID">UUID of the request message</param>
        /// <param name="x_insurantid">Health Record Identifier</param>
        /// <param name="x_useragent">user agent information</param>
        /// <param name="id">Resource ID</param>
        /// <param name="accept">The Accept header indicates the format in which the client wishes to receive the FHIR response — supported values are application/fhir+json and application/fhir+xml</param>
        /// <param name="_format">Specify alternative response formats by their MIME-types (when a client is unable acccess accept: header)</param>
        /// <param name="_count">With _count, the client can specify the maximum number of elements to be included on one page of the response. This means the Medication Service limits the result set to this maximum specified number. If no value for _count is provided, the default value set is 25.</param>
        /// <param name="_offset">This URL parameter indicates the (zero-based) offset of the first returned element in the collection. If no value for _offset is provided, the default value set is 0.</param>
        /// <param name="_total">This parameter controls whether and how the AuditEvent Service returns the total number of search results.</param>
        /// <returns>History retrieved</returns>
        /// <exception cref="MedicationServiceException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<object> History5Async(System.Guid? x_Request_ID, string x_insurantid, string x_useragent, string id, Accept10? accept, _format10? _format, string _count, int? _offset, string _total, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (x_Request_ID != null)
                        request_.Headers.TryAddWithoutValidation("X-Request-ID", ConvertToString(x_Request_ID, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_insurantid == null)
                        throw new System.ArgumentNullException("x_insurantid");
                    request_.Headers.TryAddWithoutValidation("x-insurantid", ConvertToString(x_insurantid, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_useragent == null)
                        throw new System.ArgumentNullException("x_useragent");
                    request_.Headers.TryAddWithoutValidation("x-useragent", ConvertToString(x_useragent, System.Globalization.CultureInfo.InvariantCulture));

                    if (accept != null)
                        request_.Headers.TryAddWithoutValidation("Accept", ConvertToString(accept, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "epa/medication/api/v1/fhir/MedicationRequest/{id}/_history"
                    urlBuilder_.Append("epa/medication/api/v1/fhir/MedicationRequest/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/_history");
                    urlBuilder_.Append('?');
                    if (_format != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("_format")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(_format, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (_count != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("_count")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(_count, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (_offset != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("_offset")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(_offset, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (_total != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("_total")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(_total, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new MedicationServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MedicationServiceException("Invalid request", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MedicationServiceException("Health record is in state UNKNOWN or INITIALIZED", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 410)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MedicationServiceException("Resource was deleted", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 423)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MedicationServiceException("If the insurant objected to the medication process or objected to the submission of prescription and dispensation data into the ePA system, the Medication Service is locked.", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MedicationServiceException("Device registration does not exist", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MedicationServiceException("Health record is in state SUSPENDED", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MedicationServiceException("Any other error", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MedicationServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Read version of MedicationRequest
        /// </summary>
        /// <param name="x_Request_ID">UUID of the request message</param>
        /// <param name="x_insurantid">Health Record Identifier</param>
        /// <param name="x_useragent">user agent information</param>
        /// <param name="id">Resource ID</param>
        /// <param name="vid">Version ID</param>
        /// <param name="accept">The Accept header indicates the format in which the client wishes to receive the FHIR response — supported values are application/fhir+json and application/fhir+xml</param>
        /// <param name="_format">Specify alternative response formats by their MIME-types (when a client is unable acccess accept: header)</param>
        /// <returns>MedicationRequest version read</returns>
        /// <exception cref="MedicationServiceException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<object> History6Async(System.Guid? x_Request_ID, string x_insurantid, string x_useragent, string id, string vid, Accept11? accept, _format11? _format)
        {
            return History6Async(x_Request_ID, x_insurantid, x_useragent, id, vid, accept, _format, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Read version of MedicationRequest
        /// </summary>
        /// <param name="x_Request_ID">UUID of the request message</param>
        /// <param name="x_insurantid">Health Record Identifier</param>
        /// <param name="x_useragent">user agent information</param>
        /// <param name="id">Resource ID</param>
        /// <param name="vid">Version ID</param>
        /// <param name="accept">The Accept header indicates the format in which the client wishes to receive the FHIR response — supported values are application/fhir+json and application/fhir+xml</param>
        /// <param name="_format">Specify alternative response formats by their MIME-types (when a client is unable acccess accept: header)</param>
        /// <returns>MedicationRequest version read</returns>
        /// <exception cref="MedicationServiceException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<object> History6Async(System.Guid? x_Request_ID, string x_insurantid, string x_useragent, string id, string vid, Accept11? accept, _format11? _format, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            if (vid == null)
                throw new System.ArgumentNullException("vid");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (x_Request_ID != null)
                        request_.Headers.TryAddWithoutValidation("X-Request-ID", ConvertToString(x_Request_ID, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_insurantid == null)
                        throw new System.ArgumentNullException("x_insurantid");
                    request_.Headers.TryAddWithoutValidation("x-insurantid", ConvertToString(x_insurantid, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_useragent == null)
                        throw new System.ArgumentNullException("x_useragent");
                    request_.Headers.TryAddWithoutValidation("x-useragent", ConvertToString(x_useragent, System.Globalization.CultureInfo.InvariantCulture));

                    if (accept != null)
                        request_.Headers.TryAddWithoutValidation("Accept", ConvertToString(accept, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "epa/medication/api/v1/fhir/MedicationRequest/{id}/_history/{vid}"
                    urlBuilder_.Append("epa/medication/api/v1/fhir/MedicationRequest/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/_history/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(vid, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('?');
                    if (_format != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("_format")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(_format, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new MedicationServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MedicationServiceException("Invalid request", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MedicationServiceException("Health record is in state UNKNOWN or INITIALIZED", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 410)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MedicationServiceException("Resource was deleted", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 423)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MedicationServiceException("If the insurant objected to the medication process or objected to the submission of prescription and dispensation data into the ePA system, the Medication Service is locked.", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MedicationServiceException("Device registration does not exist", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MedicationServiceException("Health record is in state SUSPENDED", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MedicationServiceException("Any other error", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MedicationServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Search for MedicationDispense
        /// </summary>
        /// <param name="x_Request_ID">UUID of the request message</param>
        /// <param name="x_insurantid">Health Record Identifier</param>
        /// <param name="x_useragent">user agent information</param>
        /// <param name="accept">The Accept header indicates the format in which the client wishes to receive the FHIR response — supported values are application/fhir+json and application/fhir+xml</param>
        /// <param name="_format">Specify alternative response formats by their MIME-types (when a client is unable acccess accept: header)</param>
        /// <param name="_count">With _count, the client can specify the maximum number of elements to be included on one page of the response. This means the Medication Service limits the result set to this maximum specified number. If no value for _count is provided, the default value set is 25.</param>
        /// <param name="_offset">This URL parameter indicates the (zero-based) offset of the first returned element in the collection. If no value for _offset is provided, the default value set is 0.</param>
        /// <param name="_total">This parameter controls whether and how the AuditEvent Service returns the total number of search results.</param>
        /// <param name="_include">Including other resources</param>
        /// <param name="_id">Resource.id</param>
        /// <param name="_lastUpdated">Resource.meta.lastUpdated</param>
        /// <param name="identifier">MedicationDispense.identifier</param>
        /// <param name="whenhandedover">MedicationDispense.whenHandedOver</param>
        /// <param name="prescription">MedicationDispense.authorizingPrescription</param>
        /// <param name="performer">MedicationDispense.performer.actor</param>
        /// <param name="status">MedicationDispense.status</param>
        /// <param name="medication">MedicationDispense.medication as Reference</param>
        /// <returns>Search successful</returns>
        /// <exception cref="MedicationServiceException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<object> MedicationDispenseAsync(System.Guid? x_Request_ID, string x_insurantid, string x_useragent, Accept12? accept, _format12? _format, string _count, int? _offset, string _total, string _include, string _id, System.DateTime? _lastUpdated, string identifier, System.DateTime? whenhandedover, System.Uri prescription, System.Uri performer, string status, System.Uri medication)
        {
            return MedicationDispenseAsync(x_Request_ID, x_insurantid, x_useragent, accept, _format, _count, _offset, _total, _include, _id, _lastUpdated, identifier, whenhandedover, prescription, performer, status, medication, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Search for MedicationDispense
        /// </summary>
        /// <param name="x_Request_ID">UUID of the request message</param>
        /// <param name="x_insurantid">Health Record Identifier</param>
        /// <param name="x_useragent">user agent information</param>
        /// <param name="accept">The Accept header indicates the format in which the client wishes to receive the FHIR response — supported values are application/fhir+json and application/fhir+xml</param>
        /// <param name="_format">Specify alternative response formats by their MIME-types (when a client is unable acccess accept: header)</param>
        /// <param name="_count">With _count, the client can specify the maximum number of elements to be included on one page of the response. This means the Medication Service limits the result set to this maximum specified number. If no value for _count is provided, the default value set is 25.</param>
        /// <param name="_offset">This URL parameter indicates the (zero-based) offset of the first returned element in the collection. If no value for _offset is provided, the default value set is 0.</param>
        /// <param name="_total">This parameter controls whether and how the AuditEvent Service returns the total number of search results.</param>
        /// <param name="_include">Including other resources</param>
        /// <param name="_id">Resource.id</param>
        /// <param name="_lastUpdated">Resource.meta.lastUpdated</param>
        /// <param name="identifier">MedicationDispense.identifier</param>
        /// <param name="whenhandedover">MedicationDispense.whenHandedOver</param>
        /// <param name="prescription">MedicationDispense.authorizingPrescription</param>
        /// <param name="performer">MedicationDispense.performer.actor</param>
        /// <param name="status">MedicationDispense.status</param>
        /// <param name="medication">MedicationDispense.medication as Reference</param>
        /// <returns>Search successful</returns>
        /// <exception cref="MedicationServiceException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<object> MedicationDispenseAsync(System.Guid? x_Request_ID, string x_insurantid, string x_useragent, Accept12? accept, _format12? _format, string _count, int? _offset, string _total, string _include, string _id, System.DateTime? _lastUpdated, string identifier, System.DateTime? whenhandedover, System.Uri prescription, System.Uri performer, string status, System.Uri medication, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (x_Request_ID != null)
                        request_.Headers.TryAddWithoutValidation("X-Request-ID", ConvertToString(x_Request_ID, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_insurantid == null)
                        throw new System.ArgumentNullException("x_insurantid");
                    request_.Headers.TryAddWithoutValidation("x-insurantid", ConvertToString(x_insurantid, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_useragent == null)
                        throw new System.ArgumentNullException("x_useragent");
                    request_.Headers.TryAddWithoutValidation("x-useragent", ConvertToString(x_useragent, System.Globalization.CultureInfo.InvariantCulture));

                    if (accept != null)
                        request_.Headers.TryAddWithoutValidation("Accept", ConvertToString(accept, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "epa/medication/api/v1/fhir/MedicationDispense"
                    urlBuilder_.Append("epa/medication/api/v1/fhir/MedicationDispense");
                    urlBuilder_.Append('?');
                    if (_format != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("_format")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(_format, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (_count != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("_count")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(_count, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (_offset != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("_offset")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(_offset, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (_total != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("_total")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(_total, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (_include != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("_include")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(_include, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (_id != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("_id")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(_id, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (_lastUpdated != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("_lastUpdated")).Append('=').Append(System.Uri.EscapeDataString(_lastUpdated.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (identifier != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("identifier")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(identifier, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (whenhandedover != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("whenhandedover")).Append('=').Append(System.Uri.EscapeDataString(whenhandedover.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (prescription != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("prescription")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(prescription, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (performer != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("performer")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(performer, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (status != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("status")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(status, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (medication != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("medication")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(medication, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new MedicationServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MedicationServiceException("Invalid query parameter(s)", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MedicationServiceException("Health record is in state UNKNOWN or INITIALIZED", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 423)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MedicationServiceException("If the insurant objected to the medication process or objected to the submission of prescription and dispensation data into the ePA system, the Medication Service is locked.", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MedicationServiceException("Device registration does not exist", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MedicationServiceException("Health record is in state SUSPENDED", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MedicationServiceException("Any other error", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MedicationServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// History for all MedicationDispense
        /// </summary>
        /// <param name="x_Request_ID">UUID of the request message</param>
        /// <param name="x_insurantid">Health Record Identifier</param>
        /// <param name="x_useragent">user agent information</param>
        /// <param name="_count">With _count, the client can specify the maximum number of elements to be included on one page of the response. This means the Medication Service limits the result set to this maximum specified number. If no value for _count is provided, the default value set is 25.</param>
        /// <param name="_offset">This URL parameter indicates the (zero-based) offset of the first returned element in the collection. If no value for _offset is provided, the default value set is 0.</param>
        /// <param name="_total">This parameter controls whether and how the AuditEvent Service returns the total number of search results.</param>
        /// <param name="accept">The Accept header indicates the format in which the client wishes to receive the FHIR response — supported values are application/fhir+json and application/fhir+xml</param>
        /// <param name="_format">Specify alternative response formats by their MIME-types (when a client is unable acccess accept: header)</param>
        /// <returns>History for type retrieved</returns>
        /// <exception cref="MedicationServiceException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<object> History7Async(System.Guid? x_Request_ID, string x_insurantid, string x_useragent, string _count, int? _offset, string _total, Accept13? accept, _format13? _format)
        {
            return History7Async(x_Request_ID, x_insurantid, x_useragent, _count, _offset, _total, accept, _format, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// History for all MedicationDispense
        /// </summary>
        /// <param name="x_Request_ID">UUID of the request message</param>
        /// <param name="x_insurantid">Health Record Identifier</param>
        /// <param name="x_useragent">user agent information</param>
        /// <param name="_count">With _count, the client can specify the maximum number of elements to be included on one page of the response. This means the Medication Service limits the result set to this maximum specified number. If no value for _count is provided, the default value set is 25.</param>
        /// <param name="_offset">This URL parameter indicates the (zero-based) offset of the first returned element in the collection. If no value for _offset is provided, the default value set is 0.</param>
        /// <param name="_total">This parameter controls whether and how the AuditEvent Service returns the total number of search results.</param>
        /// <param name="accept">The Accept header indicates the format in which the client wishes to receive the FHIR response — supported values are application/fhir+json and application/fhir+xml</param>
        /// <param name="_format">Specify alternative response formats by their MIME-types (when a client is unable acccess accept: header)</param>
        /// <returns>History for type retrieved</returns>
        /// <exception cref="MedicationServiceException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<object> History7Async(System.Guid? x_Request_ID, string x_insurantid, string x_useragent, string _count, int? _offset, string _total, Accept13? accept, _format13? _format, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (x_Request_ID != null)
                        request_.Headers.TryAddWithoutValidation("X-Request-ID", ConvertToString(x_Request_ID, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_insurantid == null)
                        throw new System.ArgumentNullException("x_insurantid");
                    request_.Headers.TryAddWithoutValidation("x-insurantid", ConvertToString(x_insurantid, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_useragent == null)
                        throw new System.ArgumentNullException("x_useragent");
                    request_.Headers.TryAddWithoutValidation("x-useragent", ConvertToString(x_useragent, System.Globalization.CultureInfo.InvariantCulture));

                    if (accept != null)
                        request_.Headers.TryAddWithoutValidation("Accept", ConvertToString(accept, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "epa/medication/api/v1/fhir/MedicationDispense/_history"
                    urlBuilder_.Append("epa/medication/api/v1/fhir/MedicationDispense/_history");
                    urlBuilder_.Append('?');
                    if (_count != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("_count")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(_count, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (_offset != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("_offset")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(_offset, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (_total != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("_total")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(_total, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (_format != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("_format")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(_format, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new MedicationServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MedicationServiceException("Invalid request", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MedicationServiceException("Health record is in state UNKNOWN or INITIALIZED", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 423)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MedicationServiceException("If the insurant objected to the medication process or objected to the submission of prescription and dispensation data into the ePA system, the Medication Service is locked.", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MedicationServiceException("Device registration does not exist", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MedicationServiceException("Health record is in state SUSPENDED", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MedicationServiceException("Any other error", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MedicationServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Read a specific MedicationDispense
        /// </summary>
        /// <param name="x_Request_ID">UUID of the request message</param>
        /// <param name="x_insurantid">Health Record Identifier</param>
        /// <param name="x_useragent">user agent information</param>
        /// <param name="id">Resource ID</param>
        /// <param name="accept">The Accept header indicates the format in which the client wishes to receive the FHIR response — supported values are application/fhir+json and application/fhir+xml</param>
        /// <param name="_format">Specify alternative response formats by their MIME-types (when a client is unable acccess accept: header)</param>
        /// <returns>MedicationDispense successfully read</returns>
        /// <exception cref="MedicationServiceException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<object> MedicationDispense2Async(System.Guid? x_Request_ID, string x_insurantid, string x_useragent, string id, Accept14? accept, _format14? _format)
        {
            return MedicationDispense2Async(x_Request_ID, x_insurantid, x_useragent, id, accept, _format, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Read a specific MedicationDispense
        /// </summary>
        /// <param name="x_Request_ID">UUID of the request message</param>
        /// <param name="x_insurantid">Health Record Identifier</param>
        /// <param name="x_useragent">user agent information</param>
        /// <param name="id">Resource ID</param>
        /// <param name="accept">The Accept header indicates the format in which the client wishes to receive the FHIR response — supported values are application/fhir+json and application/fhir+xml</param>
        /// <param name="_format">Specify alternative response formats by their MIME-types (when a client is unable acccess accept: header)</param>
        /// <returns>MedicationDispense successfully read</returns>
        /// <exception cref="MedicationServiceException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<object> MedicationDispense2Async(System.Guid? x_Request_ID, string x_insurantid, string x_useragent, string id, Accept14? accept, _format14? _format, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (x_Request_ID != null)
                        request_.Headers.TryAddWithoutValidation("X-Request-ID", ConvertToString(x_Request_ID, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_insurantid == null)
                        throw new System.ArgumentNullException("x_insurantid");
                    request_.Headers.TryAddWithoutValidation("x-insurantid", ConvertToString(x_insurantid, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_useragent == null)
                        throw new System.ArgumentNullException("x_useragent");
                    request_.Headers.TryAddWithoutValidation("x-useragent", ConvertToString(x_useragent, System.Globalization.CultureInfo.InvariantCulture));

                    if (accept != null)
                        request_.Headers.TryAddWithoutValidation("Accept", ConvertToString(accept, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "epa/medication/api/v1/fhir/MedicationDispense/{id}"
                    urlBuilder_.Append("epa/medication/api/v1/fhir/MedicationDispense/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('?');
                    if (_format != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("_format")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(_format, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new MedicationServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MedicationServiceException("Invalid request", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MedicationServiceException("Health record is in state UNKNOWN or INITIALIZED", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 410)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MedicationServiceException("Resource was deleted", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 423)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MedicationServiceException("If the insurant objected to the medication process or objected to the submission of prescription and dispensation data into the ePA system, the Medication Service is locked.", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MedicationServiceException("Device registration does not exist", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MedicationServiceException("Health record is in state SUSPENDED", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MedicationServiceException("Any other error", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MedicationServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// History of a specific MedicationDispense
        /// </summary>
        /// <param name="x_Request_ID">UUID of the request message</param>
        /// <param name="x_insurantid">Health Record Identifier</param>
        /// <param name="x_useragent">user agent information</param>
        /// <param name="id">Resource ID</param>
        /// <param name="accept">The Accept header indicates the format in which the client wishes to receive the FHIR response — supported values are application/fhir+json and application/fhir+xml</param>
        /// <param name="_format">Specify alternative response formats by their MIME-types (when a client is unable acccess accept: header)</param>
        /// <param name="_count">With _count, the client can specify the maximum number of elements to be included on one page of the response. This means the Medication Service limits the result set to this maximum specified number. If no value for _count is provided, the default value set is 25.</param>
        /// <param name="_offset">This URL parameter indicates the (zero-based) offset of the first returned element in the collection. If no value for _offset is provided, the default value set is 0.</param>
        /// <param name="_total">This parameter controls whether and how the AuditEvent Service returns the total number of search results.</param>
        /// <returns>History retrieved</returns>
        /// <exception cref="MedicationServiceException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<object> History8Async(System.Guid? x_Request_ID, string x_insurantid, string x_useragent, string id, Accept15? accept, _format15? _format, string _count, int? _offset, string _total)
        {
            return History8Async(x_Request_ID, x_insurantid, x_useragent, id, accept, _format, _count, _offset, _total, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// History of a specific MedicationDispense
        /// </summary>
        /// <param name="x_Request_ID">UUID of the request message</param>
        /// <param name="x_insurantid">Health Record Identifier</param>
        /// <param name="x_useragent">user agent information</param>
        /// <param name="id">Resource ID</param>
        /// <param name="accept">The Accept header indicates the format in which the client wishes to receive the FHIR response — supported values are application/fhir+json and application/fhir+xml</param>
        /// <param name="_format">Specify alternative response formats by their MIME-types (when a client is unable acccess accept: header)</param>
        /// <param name="_count">With _count, the client can specify the maximum number of elements to be included on one page of the response. This means the Medication Service limits the result set to this maximum specified number. If no value for _count is provided, the default value set is 25.</param>
        /// <param name="_offset">This URL parameter indicates the (zero-based) offset of the first returned element in the collection. If no value for _offset is provided, the default value set is 0.</param>
        /// <param name="_total">This parameter controls whether and how the AuditEvent Service returns the total number of search results.</param>
        /// <returns>History retrieved</returns>
        /// <exception cref="MedicationServiceException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<object> History8Async(System.Guid? x_Request_ID, string x_insurantid, string x_useragent, string id, Accept15? accept, _format15? _format, string _count, int? _offset, string _total, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (x_Request_ID != null)
                        request_.Headers.TryAddWithoutValidation("X-Request-ID", ConvertToString(x_Request_ID, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_insurantid == null)
                        throw new System.ArgumentNullException("x_insurantid");
                    request_.Headers.TryAddWithoutValidation("x-insurantid", ConvertToString(x_insurantid, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_useragent == null)
                        throw new System.ArgumentNullException("x_useragent");
                    request_.Headers.TryAddWithoutValidation("x-useragent", ConvertToString(x_useragent, System.Globalization.CultureInfo.InvariantCulture));

                    if (accept != null)
                        request_.Headers.TryAddWithoutValidation("Accept", ConvertToString(accept, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "epa/medication/api/v1/fhir/MedicationDispense/{id}/_history"
                    urlBuilder_.Append("epa/medication/api/v1/fhir/MedicationDispense/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/_history");
                    urlBuilder_.Append('?');
                    if (_format != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("_format")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(_format, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (_count != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("_count")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(_count, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (_offset != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("_offset")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(_offset, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (_total != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("_total")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(_total, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new MedicationServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MedicationServiceException("Invalid request", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MedicationServiceException("Health record is in state UNKNOWN or INITIALIZED", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 410)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MedicationServiceException("Resource was deleted", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 423)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MedicationServiceException("If the insurant objected to the medication process or objected to the submission of prescription and dispensation data into the ePA system, the Medication Service is locked.", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MedicationServiceException("Device registration does not exist", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MedicationServiceException("Health record is in state SUSPENDED", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MedicationServiceException("Any other error", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MedicationServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Read version of MedicationDispense
        /// </summary>
        /// <param name="x_Request_ID">UUID of the request message</param>
        /// <param name="x_insurantid">Health Record Identifier</param>
        /// <param name="x_useragent">user agent information</param>
        /// <param name="id">Resource ID</param>
        /// <param name="vid">Version ID</param>
        /// <param name="accept">The Accept header indicates the format in which the client wishes to receive the FHIR response — supported values are application/fhir+json and application/fhir+xml</param>
        /// <param name="_format">Specify alternative response formats by their MIME-types (when a client is unable acccess accept: header)</param>
        /// <returns>MedicationDispense version read</returns>
        /// <exception cref="MedicationServiceException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<object> History9Async(System.Guid? x_Request_ID, string x_insurantid, string x_useragent, string id, string vid, Accept16? accept, _format16? _format)
        {
            return History9Async(x_Request_ID, x_insurantid, x_useragent, id, vid, accept, _format, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Read version of MedicationDispense
        /// </summary>
        /// <param name="x_Request_ID">UUID of the request message</param>
        /// <param name="x_insurantid">Health Record Identifier</param>
        /// <param name="x_useragent">user agent information</param>
        /// <param name="id">Resource ID</param>
        /// <param name="vid">Version ID</param>
        /// <param name="accept">The Accept header indicates the format in which the client wishes to receive the FHIR response — supported values are application/fhir+json and application/fhir+xml</param>
        /// <param name="_format">Specify alternative response formats by their MIME-types (when a client is unable acccess accept: header)</param>
        /// <returns>MedicationDispense version read</returns>
        /// <exception cref="MedicationServiceException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<object> History9Async(System.Guid? x_Request_ID, string x_insurantid, string x_useragent, string id, string vid, Accept16? accept, _format16? _format, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            if (vid == null)
                throw new System.ArgumentNullException("vid");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (x_Request_ID != null)
                        request_.Headers.TryAddWithoutValidation("X-Request-ID", ConvertToString(x_Request_ID, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_insurantid == null)
                        throw new System.ArgumentNullException("x_insurantid");
                    request_.Headers.TryAddWithoutValidation("x-insurantid", ConvertToString(x_insurantid, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_useragent == null)
                        throw new System.ArgumentNullException("x_useragent");
                    request_.Headers.TryAddWithoutValidation("x-useragent", ConvertToString(x_useragent, System.Globalization.CultureInfo.InvariantCulture));

                    if (accept != null)
                        request_.Headers.TryAddWithoutValidation("Accept", ConvertToString(accept, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "epa/medication/api/v1/fhir/MedicationDispense/{id}/_history/{vid}"
                    urlBuilder_.Append("epa/medication/api/v1/fhir/MedicationDispense/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/_history/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(vid, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('?');
                    if (_format != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("_format")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(_format, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new MedicationServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MedicationServiceException("Invalid request", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MedicationServiceException("Health record is in state UNKNOWN or INITIALIZED", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 410)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MedicationServiceException("Resource was deleted", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 423)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MedicationServiceException("If the insurant objected to the medication process or objected to the submission of prescription and dispensation data into the ePA system, the Medication Service is locked.", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MedicationServiceException("Device registration does not exist", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MedicationServiceException("Health record is in state SUSPENDED", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MedicationServiceException("Any other error", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MedicationServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Search for Organization
        /// </summary>
        /// <param name="x_Request_ID">UUID of the request message</param>
        /// <param name="x_insurantid">Health Record Identifier</param>
        /// <param name="x_useragent">user agent information</param>
        /// <param name="accept">The Accept header indicates the format in which the client wishes to receive the FHIR response — supported values are application/fhir+json and application/fhir+xml</param>
        /// <param name="_format">Specify alternative response formats by their MIME-types (when a client is unable acccess accept: header)</param>
        /// <param name="_count">With _count, the client can specify the maximum number of elements to be included on one page of the response. This means the Medication Service limits the result set to this maximum specified number. If no value for _count is provided, the default value set is 25.</param>
        /// <param name="_offset">This URL parameter indicates the (zero-based) offset of the first returned element in the collection. If no value for _offset is provided, the default value set is 0.</param>
        /// <param name="_total">This parameter controls whether and how the AuditEvent Service returns the total number of search results.</param>
        /// <param name="_revinclude">Reverse include other resources</param>
        /// <param name="_id">Resource.id</param>
        /// <param name="_lastUpdated">Resource.meta.lastUpdated</param>
        /// <param name="identifier">Organization.identifier</param>
        /// <param name="name">Organization.name | Organization.alias</param>
        /// <returns>Search successful</returns>
        /// <exception cref="MedicationServiceException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<object> OrganizationAsync(System.Guid? x_Request_ID, string x_insurantid, string x_useragent, Accept17? accept, _format17? _format, string _count, int? _offset, string _total, string _revinclude, string _id, System.DateTime? _lastUpdated, string identifier, string name)
        {
            return OrganizationAsync(x_Request_ID, x_insurantid, x_useragent, accept, _format, _count, _offset, _total, _revinclude, _id, _lastUpdated, identifier, name, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Search for Organization
        /// </summary>
        /// <param name="x_Request_ID">UUID of the request message</param>
        /// <param name="x_insurantid">Health Record Identifier</param>
        /// <param name="x_useragent">user agent information</param>
        /// <param name="accept">The Accept header indicates the format in which the client wishes to receive the FHIR response — supported values are application/fhir+json and application/fhir+xml</param>
        /// <param name="_format">Specify alternative response formats by their MIME-types (when a client is unable acccess accept: header)</param>
        /// <param name="_count">With _count, the client can specify the maximum number of elements to be included on one page of the response. This means the Medication Service limits the result set to this maximum specified number. If no value for _count is provided, the default value set is 25.</param>
        /// <param name="_offset">This URL parameter indicates the (zero-based) offset of the first returned element in the collection. If no value for _offset is provided, the default value set is 0.</param>
        /// <param name="_total">This parameter controls whether and how the AuditEvent Service returns the total number of search results.</param>
        /// <param name="_revinclude">Reverse include other resources</param>
        /// <param name="_id">Resource.id</param>
        /// <param name="_lastUpdated">Resource.meta.lastUpdated</param>
        /// <param name="identifier">Organization.identifier</param>
        /// <param name="name">Organization.name | Organization.alias</param>
        /// <returns>Search successful</returns>
        /// <exception cref="MedicationServiceException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<object> OrganizationAsync(System.Guid? x_Request_ID, string x_insurantid, string x_useragent, Accept17? accept, _format17? _format, string _count, int? _offset, string _total, string _revinclude, string _id, System.DateTime? _lastUpdated, string identifier, string name, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (x_Request_ID != null)
                        request_.Headers.TryAddWithoutValidation("X-Request-ID", ConvertToString(x_Request_ID, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_insurantid == null)
                        throw new System.ArgumentNullException("x_insurantid");
                    request_.Headers.TryAddWithoutValidation("x-insurantid", ConvertToString(x_insurantid, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_useragent == null)
                        throw new System.ArgumentNullException("x_useragent");
                    request_.Headers.TryAddWithoutValidation("x-useragent", ConvertToString(x_useragent, System.Globalization.CultureInfo.InvariantCulture));

                    if (accept != null)
                        request_.Headers.TryAddWithoutValidation("Accept", ConvertToString(accept, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "epa/medication/api/v1/fhir/Organization"
                    urlBuilder_.Append("epa/medication/api/v1/fhir/Organization");
                    urlBuilder_.Append('?');
                    if (_format != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("_format")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(_format, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (_count != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("_count")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(_count, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (_offset != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("_offset")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(_offset, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (_total != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("_total")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(_total, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (_revinclude != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("_revinclude")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(_revinclude, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (_id != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("_id")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(_id, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (_lastUpdated != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("_lastUpdated")).Append('=').Append(System.Uri.EscapeDataString(_lastUpdated.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (identifier != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("identifier")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(identifier, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (name != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("name")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(name, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new MedicationServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MedicationServiceException("Invalid query parameter(s)", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MedicationServiceException("Health record is in state UNKNOWN or INITIALIZED", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 423)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MedicationServiceException("If the insurant objected to the medication process or objected to the submission of prescription and dispensation data into the ePA system, the Medication Service is locked.", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MedicationServiceException("Device registration does not exist", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MedicationServiceException("Health record is in state SUSPENDED", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MedicationServiceException("Any other error", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MedicationServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// History for all Organization
        /// </summary>
        /// <param name="x_Request_ID">UUID of the request message</param>
        /// <param name="x_insurantid">Health Record Identifier</param>
        /// <param name="x_useragent">user agent information</param>
        /// <param name="_count">With _count, the client can specify the maximum number of elements to be included on one page of the response. This means the Medication Service limits the result set to this maximum specified number. If no value for _count is provided, the default value set is 25.</param>
        /// <param name="_offset">This URL parameter indicates the (zero-based) offset of the first returned element in the collection. If no value for _offset is provided, the default value set is 0.</param>
        /// <param name="_total">This parameter controls whether and how the AuditEvent Service returns the total number of search results.</param>
        /// <param name="accept">The Accept header indicates the format in which the client wishes to receive the FHIR response — supported values are application/fhir+json and application/fhir+xml</param>
        /// <param name="_format">Specify alternative response formats by their MIME-types (when a client is unable acccess accept: header)</param>
        /// <returns>History for type retrieved</returns>
        /// <exception cref="MedicationServiceException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<object> History10Async(System.Guid? x_Request_ID, string x_insurantid, string x_useragent, string _count, int? _offset, string _total, Accept18? accept, _format18? _format)
        {
            return History10Async(x_Request_ID, x_insurantid, x_useragent, _count, _offset, _total, accept, _format, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// History for all Organization
        /// </summary>
        /// <param name="x_Request_ID">UUID of the request message</param>
        /// <param name="x_insurantid">Health Record Identifier</param>
        /// <param name="x_useragent">user agent information</param>
        /// <param name="_count">With _count, the client can specify the maximum number of elements to be included on one page of the response. This means the Medication Service limits the result set to this maximum specified number. If no value for _count is provided, the default value set is 25.</param>
        /// <param name="_offset">This URL parameter indicates the (zero-based) offset of the first returned element in the collection. If no value for _offset is provided, the default value set is 0.</param>
        /// <param name="_total">This parameter controls whether and how the AuditEvent Service returns the total number of search results.</param>
        /// <param name="accept">The Accept header indicates the format in which the client wishes to receive the FHIR response — supported values are application/fhir+json and application/fhir+xml</param>
        /// <param name="_format">Specify alternative response formats by their MIME-types (when a client is unable acccess accept: header)</param>
        /// <returns>History for type retrieved</returns>
        /// <exception cref="MedicationServiceException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<object> History10Async(System.Guid? x_Request_ID, string x_insurantid, string x_useragent, string _count, int? _offset, string _total, Accept18? accept, _format18? _format, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (x_Request_ID != null)
                        request_.Headers.TryAddWithoutValidation("X-Request-ID", ConvertToString(x_Request_ID, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_insurantid == null)
                        throw new System.ArgumentNullException("x_insurantid");
                    request_.Headers.TryAddWithoutValidation("x-insurantid", ConvertToString(x_insurantid, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_useragent == null)
                        throw new System.ArgumentNullException("x_useragent");
                    request_.Headers.TryAddWithoutValidation("x-useragent", ConvertToString(x_useragent, System.Globalization.CultureInfo.InvariantCulture));

                    if (accept != null)
                        request_.Headers.TryAddWithoutValidation("Accept", ConvertToString(accept, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "epa/medication/api/v1/fhir/Organization/_history"
                    urlBuilder_.Append("epa/medication/api/v1/fhir/Organization/_history");
                    urlBuilder_.Append('?');
                    if (_count != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("_count")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(_count, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (_offset != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("_offset")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(_offset, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (_total != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("_total")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(_total, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (_format != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("_format")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(_format, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new MedicationServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MedicationServiceException("Invalid request", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MedicationServiceException("Health record is in state UNKNOWN or INITIALIZED", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 423)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MedicationServiceException("If the insurant objected to the medication process or objected to the submission of prescription and dispensation data into the ePA system, the Medication Service is locked.", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MedicationServiceException("Device registration does not exist", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MedicationServiceException("Health record is in state SUSPENDED", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MedicationServiceException("Any other error", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MedicationServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Read a specific Organization
        /// </summary>
        /// <param name="x_Request_ID">UUID of the request message</param>
        /// <param name="x_insurantid">Health Record Identifier</param>
        /// <param name="x_useragent">user agent information</param>
        /// <param name="id">Resource ID</param>
        /// <param name="accept">The Accept header indicates the format in which the client wishes to receive the FHIR response — supported values are application/fhir+json and application/fhir+xml</param>
        /// <param name="_format">Specify alternative response formats by their MIME-types (when a client is unable acccess accept: header)</param>
        /// <returns>Organization successfully read</returns>
        /// <exception cref="MedicationServiceException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<object> Organization2Async(System.Guid? x_Request_ID, string x_insurantid, string x_useragent, string id, Accept19? accept, _format19? _format)
        {
            return Organization2Async(x_Request_ID, x_insurantid, x_useragent, id, accept, _format, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Read a specific Organization
        /// </summary>
        /// <param name="x_Request_ID">UUID of the request message</param>
        /// <param name="x_insurantid">Health Record Identifier</param>
        /// <param name="x_useragent">user agent information</param>
        /// <param name="id">Resource ID</param>
        /// <param name="accept">The Accept header indicates the format in which the client wishes to receive the FHIR response — supported values are application/fhir+json and application/fhir+xml</param>
        /// <param name="_format">Specify alternative response formats by their MIME-types (when a client is unable acccess accept: header)</param>
        /// <returns>Organization successfully read</returns>
        /// <exception cref="MedicationServiceException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<object> Organization2Async(System.Guid? x_Request_ID, string x_insurantid, string x_useragent, string id, Accept19? accept, _format19? _format, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (x_Request_ID != null)
                        request_.Headers.TryAddWithoutValidation("X-Request-ID", ConvertToString(x_Request_ID, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_insurantid == null)
                        throw new System.ArgumentNullException("x_insurantid");
                    request_.Headers.TryAddWithoutValidation("x-insurantid", ConvertToString(x_insurantid, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_useragent == null)
                        throw new System.ArgumentNullException("x_useragent");
                    request_.Headers.TryAddWithoutValidation("x-useragent", ConvertToString(x_useragent, System.Globalization.CultureInfo.InvariantCulture));

                    if (accept != null)
                        request_.Headers.TryAddWithoutValidation("Accept", ConvertToString(accept, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "epa/medication/api/v1/fhir/Organization/{id}"
                    urlBuilder_.Append("epa/medication/api/v1/fhir/Organization/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('?');
                    if (_format != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("_format")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(_format, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new MedicationServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MedicationServiceException("Invalid request", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MedicationServiceException("Health record is in state UNKNOWN or INITIALIZED", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 410)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MedicationServiceException("Resource was deleted", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 423)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MedicationServiceException("If the insurant objected to the medication process or objected to the submission of prescription and dispensation data into the ePA system, the Medication Service is locked.", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MedicationServiceException("Device registration does not exist", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MedicationServiceException("Health record is in state SUSPENDED", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MedicationServiceException("Any other error", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MedicationServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// History of a specific Organization
        /// </summary>
        /// <param name="x_Request_ID">UUID of the request message</param>
        /// <param name="x_insurantid">Health Record Identifier</param>
        /// <param name="x_useragent">user agent information</param>
        /// <param name="id">Resource ID</param>
        /// <param name="accept">The Accept header indicates the format in which the client wishes to receive the FHIR response — supported values are application/fhir+json and application/fhir+xml</param>
        /// <param name="_format">Specify alternative response formats by their MIME-types (when a client is unable acccess accept: header)</param>
        /// <param name="_count">With _count, the client can specify the maximum number of elements to be included on one page of the response. This means the Medication Service limits the result set to this maximum specified number. If no value for _count is provided, the default value set is 25.</param>
        /// <param name="_offset">This URL parameter indicates the (zero-based) offset of the first returned element in the collection. If no value for _offset is provided, the default value set is 0.</param>
        /// <param name="_total">This parameter controls whether and how the AuditEvent Service returns the total number of search results.</param>
        /// <returns>History retrieved</returns>
        /// <exception cref="MedicationServiceException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<object> History11Async(System.Guid? x_Request_ID, string x_insurantid, string x_useragent, string id, Accept20? accept, _format20? _format, string _count, int? _offset, string _total)
        {
            return History11Async(x_Request_ID, x_insurantid, x_useragent, id, accept, _format, _count, _offset, _total, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// History of a specific Organization
        /// </summary>
        /// <param name="x_Request_ID">UUID of the request message</param>
        /// <param name="x_insurantid">Health Record Identifier</param>
        /// <param name="x_useragent">user agent information</param>
        /// <param name="id">Resource ID</param>
        /// <param name="accept">The Accept header indicates the format in which the client wishes to receive the FHIR response — supported values are application/fhir+json and application/fhir+xml</param>
        /// <param name="_format">Specify alternative response formats by their MIME-types (when a client is unable acccess accept: header)</param>
        /// <param name="_count">With _count, the client can specify the maximum number of elements to be included on one page of the response. This means the Medication Service limits the result set to this maximum specified number. If no value for _count is provided, the default value set is 25.</param>
        /// <param name="_offset">This URL parameter indicates the (zero-based) offset of the first returned element in the collection. If no value for _offset is provided, the default value set is 0.</param>
        /// <param name="_total">This parameter controls whether and how the AuditEvent Service returns the total number of search results.</param>
        /// <returns>History retrieved</returns>
        /// <exception cref="MedicationServiceException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<object> History11Async(System.Guid? x_Request_ID, string x_insurantid, string x_useragent, string id, Accept20? accept, _format20? _format, string _count, int? _offset, string _total, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (x_Request_ID != null)
                        request_.Headers.TryAddWithoutValidation("X-Request-ID", ConvertToString(x_Request_ID, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_insurantid == null)
                        throw new System.ArgumentNullException("x_insurantid");
                    request_.Headers.TryAddWithoutValidation("x-insurantid", ConvertToString(x_insurantid, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_useragent == null)
                        throw new System.ArgumentNullException("x_useragent");
                    request_.Headers.TryAddWithoutValidation("x-useragent", ConvertToString(x_useragent, System.Globalization.CultureInfo.InvariantCulture));

                    if (accept != null)
                        request_.Headers.TryAddWithoutValidation("Accept", ConvertToString(accept, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "epa/medication/api/v1/fhir/Organization/{id}/_history"
                    urlBuilder_.Append("epa/medication/api/v1/fhir/Organization/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/_history");
                    urlBuilder_.Append('?');
                    if (_format != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("_format")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(_format, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (_count != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("_count")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(_count, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (_offset != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("_offset")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(_offset, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (_total != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("_total")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(_total, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new MedicationServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MedicationServiceException("Invalid request", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MedicationServiceException("Health record is in state UNKNOWN or INITIALIZED", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 410)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MedicationServiceException("Resource was deleted", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 423)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MedicationServiceException("If the insurant objected to the medication process or objected to the submission of prescription and dispensation data into the ePA system, the Medication Service is locked.", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MedicationServiceException("Device registration does not exist", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MedicationServiceException("Health record is in state SUSPENDED", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MedicationServiceException("Any other error", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MedicationServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Read version of Organization
        /// </summary>
        /// <param name="x_Request_ID">UUID of the request message</param>
        /// <param name="x_insurantid">Health Record Identifier</param>
        /// <param name="x_useragent">user agent information</param>
        /// <param name="id">Resource ID</param>
        /// <param name="vid">Version ID</param>
        /// <param name="accept">The Accept header indicates the format in which the client wishes to receive the FHIR response — supported values are application/fhir+json and application/fhir+xml</param>
        /// <param name="_format">Specify alternative response formats by their MIME-types (when a client is unable acccess accept: header)</param>
        /// <returns>Organization version read</returns>
        /// <exception cref="MedicationServiceException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<object> History12Async(System.Guid? x_Request_ID, string x_insurantid, string x_useragent, string id, string vid, Accept21? accept, _format21? _format)
        {
            return History12Async(x_Request_ID, x_insurantid, x_useragent, id, vid, accept, _format, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Read version of Organization
        /// </summary>
        /// <param name="x_Request_ID">UUID of the request message</param>
        /// <param name="x_insurantid">Health Record Identifier</param>
        /// <param name="x_useragent">user agent information</param>
        /// <param name="id">Resource ID</param>
        /// <param name="vid">Version ID</param>
        /// <param name="accept">The Accept header indicates the format in which the client wishes to receive the FHIR response — supported values are application/fhir+json and application/fhir+xml</param>
        /// <param name="_format">Specify alternative response formats by their MIME-types (when a client is unable acccess accept: header)</param>
        /// <returns>Organization version read</returns>
        /// <exception cref="MedicationServiceException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<object> History12Async(System.Guid? x_Request_ID, string x_insurantid, string x_useragent, string id, string vid, Accept21? accept, _format21? _format, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            if (vid == null)
                throw new System.ArgumentNullException("vid");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (x_Request_ID != null)
                        request_.Headers.TryAddWithoutValidation("X-Request-ID", ConvertToString(x_Request_ID, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_insurantid == null)
                        throw new System.ArgumentNullException("x_insurantid");
                    request_.Headers.TryAddWithoutValidation("x-insurantid", ConvertToString(x_insurantid, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_useragent == null)
                        throw new System.ArgumentNullException("x_useragent");
                    request_.Headers.TryAddWithoutValidation("x-useragent", ConvertToString(x_useragent, System.Globalization.CultureInfo.InvariantCulture));

                    if (accept != null)
                        request_.Headers.TryAddWithoutValidation("Accept", ConvertToString(accept, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "epa/medication/api/v1/fhir/Organization/{id}/_history/{vid}"
                    urlBuilder_.Append("epa/medication/api/v1/fhir/Organization/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/_history/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(vid, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('?');
                    if (_format != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("_format")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(_format, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new MedicationServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MedicationServiceException("Invalid request", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MedicationServiceException("Health record is in state UNKNOWN or INITIALIZED", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 410)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MedicationServiceException("Resource was deleted", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 423)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MedicationServiceException("If the insurant objected to the medication process or objected to the submission of prescription and dispensation data into the ePA system, the Medication Service is locked.", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MedicationServiceException("Device registration does not exist", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MedicationServiceException("Health record is in state SUSPENDED", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MedicationServiceException("Any other error", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MedicationServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Search for Practitioner
        /// </summary>
        /// <param name="x_Request_ID">UUID of the request message</param>
        /// <param name="x_insurantid">Health Record Identifier</param>
        /// <param name="x_useragent">user agent information</param>
        /// <param name="accept">The Accept header indicates the format in which the client wishes to receive the FHIR response — supported values are application/fhir+json and application/fhir+xml</param>
        /// <param name="_format">Specify alternative response formats by their MIME-types (when a client is unable acccess accept: header)</param>
        /// <param name="_count">With _count, the client can specify the maximum number of elements to be included on one page of the response. This means the Medication Service limits the result set to this maximum specified number. If no value for _count is provided, the default value set is 25.</param>
        /// <param name="_offset">This URL parameter indicates the (zero-based) offset of the first returned element in the collection. If no value for _offset is provided, the default value set is 0.</param>
        /// <param name="_total">This parameter controls whether and how the AuditEvent Service returns the total number of search results.</param>
        /// <param name="_revinclude">Reverse include other resources</param>
        /// <param name="_id">Resource.id</param>
        /// <param name="_lastUpdated">Resource.meta.lastUpdated</param>
        /// <param name="identifier">Practitioner.identifier</param>
        /// <param name="name">Practitioner.name</param>
        /// <returns>Search successful</returns>
        /// <exception cref="MedicationServiceException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<object> PractitionerAsync(System.Guid? x_Request_ID, string x_insurantid, string x_useragent, Accept22? accept, _format22? _format, string _count, int? _offset, string _total, string _revinclude, string _id, System.DateTime? _lastUpdated, string identifier, string name)
        {
            return PractitionerAsync(x_Request_ID, x_insurantid, x_useragent, accept, _format, _count, _offset, _total, _revinclude, _id, _lastUpdated, identifier, name, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Search for Practitioner
        /// </summary>
        /// <param name="x_Request_ID">UUID of the request message</param>
        /// <param name="x_insurantid">Health Record Identifier</param>
        /// <param name="x_useragent">user agent information</param>
        /// <param name="accept">The Accept header indicates the format in which the client wishes to receive the FHIR response — supported values are application/fhir+json and application/fhir+xml</param>
        /// <param name="_format">Specify alternative response formats by their MIME-types (when a client is unable acccess accept: header)</param>
        /// <param name="_count">With _count, the client can specify the maximum number of elements to be included on one page of the response. This means the Medication Service limits the result set to this maximum specified number. If no value for _count is provided, the default value set is 25.</param>
        /// <param name="_offset">This URL parameter indicates the (zero-based) offset of the first returned element in the collection. If no value for _offset is provided, the default value set is 0.</param>
        /// <param name="_total">This parameter controls whether and how the AuditEvent Service returns the total number of search results.</param>
        /// <param name="_revinclude">Reverse include other resources</param>
        /// <param name="_id">Resource.id</param>
        /// <param name="_lastUpdated">Resource.meta.lastUpdated</param>
        /// <param name="identifier">Practitioner.identifier</param>
        /// <param name="name">Practitioner.name</param>
        /// <returns>Search successful</returns>
        /// <exception cref="MedicationServiceException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<object> PractitionerAsync(System.Guid? x_Request_ID, string x_insurantid, string x_useragent, Accept22? accept, _format22? _format, string _count, int? _offset, string _total, string _revinclude, string _id, System.DateTime? _lastUpdated, string identifier, string name, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (x_Request_ID != null)
                        request_.Headers.TryAddWithoutValidation("X-Request-ID", ConvertToString(x_Request_ID, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_insurantid == null)
                        throw new System.ArgumentNullException("x_insurantid");
                    request_.Headers.TryAddWithoutValidation("x-insurantid", ConvertToString(x_insurantid, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_useragent == null)
                        throw new System.ArgumentNullException("x_useragent");
                    request_.Headers.TryAddWithoutValidation("x-useragent", ConvertToString(x_useragent, System.Globalization.CultureInfo.InvariantCulture));

                    if (accept != null)
                        request_.Headers.TryAddWithoutValidation("Accept", ConvertToString(accept, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "epa/medication/api/v1/fhir/Practitioner"
                    urlBuilder_.Append("epa/medication/api/v1/fhir/Practitioner");
                    urlBuilder_.Append('?');
                    if (_format != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("_format")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(_format, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (_count != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("_count")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(_count, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (_offset != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("_offset")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(_offset, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (_total != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("_total")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(_total, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (_revinclude != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("_revinclude")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(_revinclude, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (_id != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("_id")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(_id, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (_lastUpdated != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("_lastUpdated")).Append('=').Append(System.Uri.EscapeDataString(_lastUpdated.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (identifier != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("identifier")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(identifier, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (name != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("name")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(name, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new MedicationServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MedicationServiceException("Invalid query parameter(s)", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MedicationServiceException("Health record is in state UNKNOWN or INITIALIZED", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 423)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MedicationServiceException("If the insurant objected to the medication process or objected to the submission of prescription and dispensation data into the ePA system, the Medication Service is locked.", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MedicationServiceException("Device registration does not exist", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MedicationServiceException("Health record is in state SUSPENDED", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MedicationServiceException("Any other error", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MedicationServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// History for all Practitioner
        /// </summary>
        /// <param name="x_Request_ID">UUID of the request message</param>
        /// <param name="x_insurantid">Health Record Identifier</param>
        /// <param name="x_useragent">user agent information</param>
        /// <param name="_count">With _count, the client can specify the maximum number of elements to be included on one page of the response. This means the Medication Service limits the result set to this maximum specified number. If no value for _count is provided, the default value set is 25.</param>
        /// <param name="_offset">This URL parameter indicates the (zero-based) offset of the first returned element in the collection. If no value for _offset is provided, the default value set is 0.</param>
        /// <param name="_total">This parameter controls whether and how the AuditEvent Service returns the total number of search results.</param>
        /// <param name="accept">The Accept header indicates the format in which the client wishes to receive the FHIR response — supported values are application/fhir+json and application/fhir+xml</param>
        /// <param name="_format">Specify alternative response formats by their MIME-types (when a client is unable acccess accept: header)</param>
        /// <returns>History for type retrieved</returns>
        /// <exception cref="MedicationServiceException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<object> History13Async(System.Guid? x_Request_ID, string x_insurantid, string x_useragent, string _count, int? _offset, string _total, Accept23? accept, _format23? _format)
        {
            return History13Async(x_Request_ID, x_insurantid, x_useragent, _count, _offset, _total, accept, _format, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// History for all Practitioner
        /// </summary>
        /// <param name="x_Request_ID">UUID of the request message</param>
        /// <param name="x_insurantid">Health Record Identifier</param>
        /// <param name="x_useragent">user agent information</param>
        /// <param name="_count">With _count, the client can specify the maximum number of elements to be included on one page of the response. This means the Medication Service limits the result set to this maximum specified number. If no value for _count is provided, the default value set is 25.</param>
        /// <param name="_offset">This URL parameter indicates the (zero-based) offset of the first returned element in the collection. If no value for _offset is provided, the default value set is 0.</param>
        /// <param name="_total">This parameter controls whether and how the AuditEvent Service returns the total number of search results.</param>
        /// <param name="accept">The Accept header indicates the format in which the client wishes to receive the FHIR response — supported values are application/fhir+json and application/fhir+xml</param>
        /// <param name="_format">Specify alternative response formats by their MIME-types (when a client is unable acccess accept: header)</param>
        /// <returns>History for type retrieved</returns>
        /// <exception cref="MedicationServiceException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<object> History13Async(System.Guid? x_Request_ID, string x_insurantid, string x_useragent, string _count, int? _offset, string _total, Accept23? accept, _format23? _format, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (x_Request_ID != null)
                        request_.Headers.TryAddWithoutValidation("X-Request-ID", ConvertToString(x_Request_ID, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_insurantid == null)
                        throw new System.ArgumentNullException("x_insurantid");
                    request_.Headers.TryAddWithoutValidation("x-insurantid", ConvertToString(x_insurantid, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_useragent == null)
                        throw new System.ArgumentNullException("x_useragent");
                    request_.Headers.TryAddWithoutValidation("x-useragent", ConvertToString(x_useragent, System.Globalization.CultureInfo.InvariantCulture));

                    if (accept != null)
                        request_.Headers.TryAddWithoutValidation("Accept", ConvertToString(accept, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "epa/medication/api/v1/fhir/Practitioner/_history"
                    urlBuilder_.Append("epa/medication/api/v1/fhir/Practitioner/_history");
                    urlBuilder_.Append('?');
                    if (_count != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("_count")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(_count, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (_offset != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("_offset")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(_offset, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (_total != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("_total")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(_total, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (_format != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("_format")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(_format, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new MedicationServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MedicationServiceException("Invalid request", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MedicationServiceException("Health record is in state UNKNOWN or INITIALIZED", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 423)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MedicationServiceException("If the insurant objected to the medication process or objected to the submission of prescription and dispensation data into the ePA system, the Medication Service is locked.", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MedicationServiceException("Device registration does not exist", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MedicationServiceException("Health record is in state SUSPENDED", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MedicationServiceException("Any other error", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MedicationServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Read a specific Practitioner
        /// </summary>
        /// <param name="x_Request_ID">UUID of the request message</param>
        /// <param name="x_insurantid">Health Record Identifier</param>
        /// <param name="x_useragent">user agent information</param>
        /// <param name="id">Resource ID</param>
        /// <param name="accept">The Accept header indicates the format in which the client wishes to receive the FHIR response — supported values are application/fhir+json and application/fhir+xml</param>
        /// <param name="_format">Specify alternative response formats by their MIME-types (when a client is unable acccess accept: header)</param>
        /// <returns>Practitioner successfully read</returns>
        /// <exception cref="MedicationServiceException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<object> Practitioner2Async(System.Guid? x_Request_ID, string x_insurantid, string x_useragent, string id, Accept24? accept, _format24? _format)
        {
            return Practitioner2Async(x_Request_ID, x_insurantid, x_useragent, id, accept, _format, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Read a specific Practitioner
        /// </summary>
        /// <param name="x_Request_ID">UUID of the request message</param>
        /// <param name="x_insurantid">Health Record Identifier</param>
        /// <param name="x_useragent">user agent information</param>
        /// <param name="id">Resource ID</param>
        /// <param name="accept">The Accept header indicates the format in which the client wishes to receive the FHIR response — supported values are application/fhir+json and application/fhir+xml</param>
        /// <param name="_format">Specify alternative response formats by their MIME-types (when a client is unable acccess accept: header)</param>
        /// <returns>Practitioner successfully read</returns>
        /// <exception cref="MedicationServiceException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<object> Practitioner2Async(System.Guid? x_Request_ID, string x_insurantid, string x_useragent, string id, Accept24? accept, _format24? _format, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (x_Request_ID != null)
                        request_.Headers.TryAddWithoutValidation("X-Request-ID", ConvertToString(x_Request_ID, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_insurantid == null)
                        throw new System.ArgumentNullException("x_insurantid");
                    request_.Headers.TryAddWithoutValidation("x-insurantid", ConvertToString(x_insurantid, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_useragent == null)
                        throw new System.ArgumentNullException("x_useragent");
                    request_.Headers.TryAddWithoutValidation("x-useragent", ConvertToString(x_useragent, System.Globalization.CultureInfo.InvariantCulture));

                    if (accept != null)
                        request_.Headers.TryAddWithoutValidation("Accept", ConvertToString(accept, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "epa/medication/api/v1/fhir/Practitioner/{id}"
                    urlBuilder_.Append("epa/medication/api/v1/fhir/Practitioner/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('?');
                    if (_format != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("_format")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(_format, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new MedicationServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MedicationServiceException("Invalid request", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MedicationServiceException("Health record is in state UNKNOWN or INITIALIZED", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 410)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MedicationServiceException("Resource was deleted", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 423)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MedicationServiceException("If the insurant objected to the medication process or objected to the submission of prescription and dispensation data into the ePA system, the Medication Service is locked.", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MedicationServiceException("Device registration does not exist", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MedicationServiceException("Health record is in state SUSPENDED", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MedicationServiceException("Any other error", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MedicationServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// History of a specific Practitioner
        /// </summary>
        /// <param name="x_Request_ID">UUID of the request message</param>
        /// <param name="x_insurantid">Health Record Identifier</param>
        /// <param name="x_useragent">user agent information</param>
        /// <param name="id">Resource ID</param>
        /// <param name="accept">The Accept header indicates the format in which the client wishes to receive the FHIR response — supported values are application/fhir+json and application/fhir+xml</param>
        /// <param name="_format">Specify alternative response formats by their MIME-types (when a client is unable acccess accept: header)</param>
        /// <param name="_count">With _count, the client can specify the maximum number of elements to be included on one page of the response. This means the Medication Service limits the result set to this maximum specified number. If no value for _count is provided, the default value set is 25.</param>
        /// <param name="_offset">This URL parameter indicates the (zero-based) offset of the first returned element in the collection. If no value for _offset is provided, the default value set is 0.</param>
        /// <param name="_total">This parameter controls whether and how the AuditEvent Service returns the total number of search results.</param>
        /// <returns>History retrieved</returns>
        /// <exception cref="MedicationServiceException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<object> History14Async(System.Guid? x_Request_ID, string x_insurantid, string x_useragent, string id, Accept25? accept, _format25? _format, string _count, int? _offset, string _total)
        {
            return History14Async(x_Request_ID, x_insurantid, x_useragent, id, accept, _format, _count, _offset, _total, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// History of a specific Practitioner
        /// </summary>
        /// <param name="x_Request_ID">UUID of the request message</param>
        /// <param name="x_insurantid">Health Record Identifier</param>
        /// <param name="x_useragent">user agent information</param>
        /// <param name="id">Resource ID</param>
        /// <param name="accept">The Accept header indicates the format in which the client wishes to receive the FHIR response — supported values are application/fhir+json and application/fhir+xml</param>
        /// <param name="_format">Specify alternative response formats by their MIME-types (when a client is unable acccess accept: header)</param>
        /// <param name="_count">With _count, the client can specify the maximum number of elements to be included on one page of the response. This means the Medication Service limits the result set to this maximum specified number. If no value for _count is provided, the default value set is 25.</param>
        /// <param name="_offset">This URL parameter indicates the (zero-based) offset of the first returned element in the collection. If no value for _offset is provided, the default value set is 0.</param>
        /// <param name="_total">This parameter controls whether and how the AuditEvent Service returns the total number of search results.</param>
        /// <returns>History retrieved</returns>
        /// <exception cref="MedicationServiceException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<object> History14Async(System.Guid? x_Request_ID, string x_insurantid, string x_useragent, string id, Accept25? accept, _format25? _format, string _count, int? _offset, string _total, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (x_Request_ID != null)
                        request_.Headers.TryAddWithoutValidation("X-Request-ID", ConvertToString(x_Request_ID, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_insurantid == null)
                        throw new System.ArgumentNullException("x_insurantid");
                    request_.Headers.TryAddWithoutValidation("x-insurantid", ConvertToString(x_insurantid, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_useragent == null)
                        throw new System.ArgumentNullException("x_useragent");
                    request_.Headers.TryAddWithoutValidation("x-useragent", ConvertToString(x_useragent, System.Globalization.CultureInfo.InvariantCulture));

                    if (accept != null)
                        request_.Headers.TryAddWithoutValidation("Accept", ConvertToString(accept, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "epa/medication/api/v1/fhir/Practitioner/{id}/_history"
                    urlBuilder_.Append("epa/medication/api/v1/fhir/Practitioner/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/_history");
                    urlBuilder_.Append('?');
                    if (_format != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("_format")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(_format, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (_count != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("_count")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(_count, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (_offset != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("_offset")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(_offset, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (_total != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("_total")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(_total, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new MedicationServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MedicationServiceException("Invalid request", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MedicationServiceException("Health record is in state UNKNOWN or INITIALIZED", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 410)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MedicationServiceException("Resource was deleted", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 423)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MedicationServiceException("If the insurant objected to the medication process or objected to the submission of prescription and dispensation data into the ePA system, the Medication Service is locked.", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MedicationServiceException("Device registration does not exist", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MedicationServiceException("Health record is in state SUSPENDED", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MedicationServiceException("Any other error", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MedicationServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Read version of Practitioner
        /// </summary>
        /// <param name="x_Request_ID">UUID of the request message</param>
        /// <param name="x_insurantid">Health Record Identifier</param>
        /// <param name="x_useragent">user agent information</param>
        /// <param name="id">Resource ID</param>
        /// <param name="vid">Version ID</param>
        /// <param name="accept">The Accept header indicates the format in which the client wishes to receive the FHIR response — supported values are application/fhir+json and application/fhir+xml</param>
        /// <param name="_format">Specify alternative response formats by their MIME-types (when a client is unable acccess accept: header)</param>
        /// <returns>Practitioner version read</returns>
        /// <exception cref="MedicationServiceException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<object> History15Async(System.Guid? x_Request_ID, string x_insurantid, string x_useragent, string id, string vid, Accept26? accept, _format26? _format)
        {
            return History15Async(x_Request_ID, x_insurantid, x_useragent, id, vid, accept, _format, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Read version of Practitioner
        /// </summary>
        /// <param name="x_Request_ID">UUID of the request message</param>
        /// <param name="x_insurantid">Health Record Identifier</param>
        /// <param name="x_useragent">user agent information</param>
        /// <param name="id">Resource ID</param>
        /// <param name="vid">Version ID</param>
        /// <param name="accept">The Accept header indicates the format in which the client wishes to receive the FHIR response — supported values are application/fhir+json and application/fhir+xml</param>
        /// <param name="_format">Specify alternative response formats by their MIME-types (when a client is unable acccess accept: header)</param>
        /// <returns>Practitioner version read</returns>
        /// <exception cref="MedicationServiceException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<object> History15Async(System.Guid? x_Request_ID, string x_insurantid, string x_useragent, string id, string vid, Accept26? accept, _format26? _format, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            if (vid == null)
                throw new System.ArgumentNullException("vid");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (x_Request_ID != null)
                        request_.Headers.TryAddWithoutValidation("X-Request-ID", ConvertToString(x_Request_ID, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_insurantid == null)
                        throw new System.ArgumentNullException("x_insurantid");
                    request_.Headers.TryAddWithoutValidation("x-insurantid", ConvertToString(x_insurantid, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_useragent == null)
                        throw new System.ArgumentNullException("x_useragent");
                    request_.Headers.TryAddWithoutValidation("x-useragent", ConvertToString(x_useragent, System.Globalization.CultureInfo.InvariantCulture));

                    if (accept != null)
                        request_.Headers.TryAddWithoutValidation("Accept", ConvertToString(accept, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "epa/medication/api/v1/fhir/Practitioner/{id}/_history/{vid}"
                    urlBuilder_.Append("epa/medication/api/v1/fhir/Practitioner/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/_history/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(vid, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('?');
                    if (_format != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("_format")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(_format, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new MedicationServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MedicationServiceException("Invalid request", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MedicationServiceException("Health record is in state UNKNOWN or INITIALIZED", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 410)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MedicationServiceException("Resource was deleted", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 423)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MedicationServiceException("If the insurant objected to the medication process or objected to the submission of prescription and dispensation data into the ePA system, the Medication Service is locked.", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MedicationServiceException("Device registration does not exist", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MedicationServiceException("Health record is in state SUSPENDED", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MedicationServiceException("Any other error", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MedicationServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Search for PractitionerRole
        /// </summary>
        /// <param name="x_Request_ID">UUID of the request message</param>
        /// <param name="x_insurantid">Health Record Identifier</param>
        /// <param name="x_useragent">user agent information</param>
        /// <param name="accept">The Accept header indicates the format in which the client wishes to receive the FHIR response — supported values are application/fhir+json and application/fhir+xml</param>
        /// <param name="_format">Specify alternative response formats by their MIME-types (when a client is unable acccess accept: header)</param>
        /// <param name="_count">With _count, the client can specify the maximum number of elements to be included on one page of the response. This means the Medication Service limits the result set to this maximum specified number. If no value for _count is provided, the default value set is 25.</param>
        /// <param name="_offset">This URL parameter indicates the (zero-based) offset of the first returned element in the collection. If no value for _offset is provided, the default value set is 0.</param>
        /// <param name="_total">This parameter controls whether and how the AuditEvent Service returns the total number of search results.</param>
        /// <param name="_include">Including other resources</param>
        /// <param name="_revinclude">Reverse include other resources</param>
        /// <param name="_id">Resource.id</param>
        /// <param name="_lastUpdated">Resource.meta.lastUpdated</param>
        /// <param name="identifier">PractitionerRole.identifier</param>
        /// <param name="practitioner">PractitionerRole.practitioner</param>
        /// <param name="organization">PractitionerRole.organization</param>
        /// <returns>Search successful</returns>
        /// <exception cref="MedicationServiceException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<object> PractitionerRoleAsync(System.Guid? x_Request_ID, string x_insurantid, string x_useragent, Accept27? accept, _format27? _format, string _count, int? _offset, string _total, string _include, string _revinclude, string _id, System.DateTime? _lastUpdated, string identifier, System.Uri practitioner, System.Uri organization)
        {
            return PractitionerRoleAsync(x_Request_ID, x_insurantid, x_useragent, accept, _format, _count, _offset, _total, _include, _revinclude, _id, _lastUpdated, identifier, practitioner, organization, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Search for PractitionerRole
        /// </summary>
        /// <param name="x_Request_ID">UUID of the request message</param>
        /// <param name="x_insurantid">Health Record Identifier</param>
        /// <param name="x_useragent">user agent information</param>
        /// <param name="accept">The Accept header indicates the format in which the client wishes to receive the FHIR response — supported values are application/fhir+json and application/fhir+xml</param>
        /// <param name="_format">Specify alternative response formats by their MIME-types (when a client is unable acccess accept: header)</param>
        /// <param name="_count">With _count, the client can specify the maximum number of elements to be included on one page of the response. This means the Medication Service limits the result set to this maximum specified number. If no value for _count is provided, the default value set is 25.</param>
        /// <param name="_offset">This URL parameter indicates the (zero-based) offset of the first returned element in the collection. If no value for _offset is provided, the default value set is 0.</param>
        /// <param name="_total">This parameter controls whether and how the AuditEvent Service returns the total number of search results.</param>
        /// <param name="_include">Including other resources</param>
        /// <param name="_revinclude">Reverse include other resources</param>
        /// <param name="_id">Resource.id</param>
        /// <param name="_lastUpdated">Resource.meta.lastUpdated</param>
        /// <param name="identifier">PractitionerRole.identifier</param>
        /// <param name="practitioner">PractitionerRole.practitioner</param>
        /// <param name="organization">PractitionerRole.organization</param>
        /// <returns>Search successful</returns>
        /// <exception cref="MedicationServiceException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<object> PractitionerRoleAsync(System.Guid? x_Request_ID, string x_insurantid, string x_useragent, Accept27? accept, _format27? _format, string _count, int? _offset, string _total, string _include, string _revinclude, string _id, System.DateTime? _lastUpdated, string identifier, System.Uri practitioner, System.Uri organization, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (x_Request_ID != null)
                        request_.Headers.TryAddWithoutValidation("X-Request-ID", ConvertToString(x_Request_ID, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_insurantid == null)
                        throw new System.ArgumentNullException("x_insurantid");
                    request_.Headers.TryAddWithoutValidation("x-insurantid", ConvertToString(x_insurantid, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_useragent == null)
                        throw new System.ArgumentNullException("x_useragent");
                    request_.Headers.TryAddWithoutValidation("x-useragent", ConvertToString(x_useragent, System.Globalization.CultureInfo.InvariantCulture));

                    if (accept != null)
                        request_.Headers.TryAddWithoutValidation("Accept", ConvertToString(accept, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "epa/medication/api/v1/fhir/PractitionerRole"
                    urlBuilder_.Append("epa/medication/api/v1/fhir/PractitionerRole");
                    urlBuilder_.Append('?');
                    if (_format != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("_format")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(_format, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (_count != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("_count")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(_count, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (_offset != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("_offset")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(_offset, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (_total != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("_total")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(_total, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (_include != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("_include")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(_include, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (_revinclude != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("_revinclude")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(_revinclude, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (_id != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("_id")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(_id, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (_lastUpdated != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("_lastUpdated")).Append('=').Append(System.Uri.EscapeDataString(_lastUpdated.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (identifier != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("identifier")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(identifier, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (practitioner != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("practitioner")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(practitioner, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (organization != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("organization")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(organization, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new MedicationServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MedicationServiceException("Invalid query parameter(s)", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MedicationServiceException("Health record is in state UNKNOWN or INITIALIZED", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 423)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MedicationServiceException("If the insurant objected to the medication process or objected to the submission of prescription and dispensation data into the ePA system, the Medication Service is locked.", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MedicationServiceException("Device registration does not exist", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MedicationServiceException("Health record is in state SUSPENDED", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MedicationServiceException("Any other error", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MedicationServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// History for all PractitionerRole
        /// </summary>
        /// <param name="x_Request_ID">UUID of the request message</param>
        /// <param name="x_insurantid">Health Record Identifier</param>
        /// <param name="x_useragent">user agent information</param>
        /// <param name="_count">With _count, the client can specify the maximum number of elements to be included on one page of the response. This means the Medication Service limits the result set to this maximum specified number. If no value for _count is provided, the default value set is 25.</param>
        /// <param name="_offset">This URL parameter indicates the (zero-based) offset of the first returned element in the collection. If no value for _offset is provided, the default value set is 0.</param>
        /// <param name="_total">This parameter controls whether and how the AuditEvent Service returns the total number of search results.</param>
        /// <param name="accept">The Accept header indicates the format in which the client wishes to receive the FHIR response — supported values are application/fhir+json and application/fhir+xml</param>
        /// <param name="_format">Specify alternative response formats by their MIME-types (when a client is unable acccess accept: header)</param>
        /// <returns>History for type retrieved</returns>
        /// <exception cref="MedicationServiceException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<object> History16Async(System.Guid? x_Request_ID, string x_insurantid, string x_useragent, string _count, int? _offset, string _total, Accept28? accept, _format28? _format)
        {
            return History16Async(x_Request_ID, x_insurantid, x_useragent, _count, _offset, _total, accept, _format, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// History for all PractitionerRole
        /// </summary>
        /// <param name="x_Request_ID">UUID of the request message</param>
        /// <param name="x_insurantid">Health Record Identifier</param>
        /// <param name="x_useragent">user agent information</param>
        /// <param name="_count">With _count, the client can specify the maximum number of elements to be included on one page of the response. This means the Medication Service limits the result set to this maximum specified number. If no value for _count is provided, the default value set is 25.</param>
        /// <param name="_offset">This URL parameter indicates the (zero-based) offset of the first returned element in the collection. If no value for _offset is provided, the default value set is 0.</param>
        /// <param name="_total">This parameter controls whether and how the AuditEvent Service returns the total number of search results.</param>
        /// <param name="accept">The Accept header indicates the format in which the client wishes to receive the FHIR response — supported values are application/fhir+json and application/fhir+xml</param>
        /// <param name="_format">Specify alternative response formats by their MIME-types (when a client is unable acccess accept: header)</param>
        /// <returns>History for type retrieved</returns>
        /// <exception cref="MedicationServiceException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<object> History16Async(System.Guid? x_Request_ID, string x_insurantid, string x_useragent, string _count, int? _offset, string _total, Accept28? accept, _format28? _format, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (x_Request_ID != null)
                        request_.Headers.TryAddWithoutValidation("X-Request-ID", ConvertToString(x_Request_ID, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_insurantid == null)
                        throw new System.ArgumentNullException("x_insurantid");
                    request_.Headers.TryAddWithoutValidation("x-insurantid", ConvertToString(x_insurantid, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_useragent == null)
                        throw new System.ArgumentNullException("x_useragent");
                    request_.Headers.TryAddWithoutValidation("x-useragent", ConvertToString(x_useragent, System.Globalization.CultureInfo.InvariantCulture));

                    if (accept != null)
                        request_.Headers.TryAddWithoutValidation("Accept", ConvertToString(accept, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "epa/medication/api/v1/fhir/PractitionerRole/_history"
                    urlBuilder_.Append("epa/medication/api/v1/fhir/PractitionerRole/_history");
                    urlBuilder_.Append('?');
                    if (_count != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("_count")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(_count, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (_offset != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("_offset")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(_offset, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (_total != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("_total")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(_total, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (_format != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("_format")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(_format, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new MedicationServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MedicationServiceException("Invalid request", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MedicationServiceException("Health record is in state UNKNOWN or INITIALIZED", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 423)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MedicationServiceException("If the insurant objected to the medication process or objected to the submission of prescription and dispensation data into the ePA system, the Medication Service is locked.", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MedicationServiceException("Device registration does not exist", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MedicationServiceException("Health record is in state SUSPENDED", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MedicationServiceException("Any other error", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MedicationServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Read a specific PractitionerRole
        /// </summary>
        /// <param name="x_Request_ID">UUID of the request message</param>
        /// <param name="x_insurantid">Health Record Identifier</param>
        /// <param name="x_useragent">user agent information</param>
        /// <param name="id">Resource ID</param>
        /// <param name="accept">The Accept header indicates the format in which the client wishes to receive the FHIR response — supported values are application/fhir+json and application/fhir+xml</param>
        /// <param name="_format">Specify alternative response formats by their MIME-types (when a client is unable acccess accept: header)</param>
        /// <returns>PractitionerRole successfully read</returns>
        /// <exception cref="MedicationServiceException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<object> PractitionerRole2Async(System.Guid? x_Request_ID, string x_insurantid, string x_useragent, string id, Accept29? accept, _format29? _format)
        {
            return PractitionerRole2Async(x_Request_ID, x_insurantid, x_useragent, id, accept, _format, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Read a specific PractitionerRole
        /// </summary>
        /// <param name="x_Request_ID">UUID of the request message</param>
        /// <param name="x_insurantid">Health Record Identifier</param>
        /// <param name="x_useragent">user agent information</param>
        /// <param name="id">Resource ID</param>
        /// <param name="accept">The Accept header indicates the format in which the client wishes to receive the FHIR response — supported values are application/fhir+json and application/fhir+xml</param>
        /// <param name="_format">Specify alternative response formats by their MIME-types (when a client is unable acccess accept: header)</param>
        /// <returns>PractitionerRole successfully read</returns>
        /// <exception cref="MedicationServiceException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<object> PractitionerRole2Async(System.Guid? x_Request_ID, string x_insurantid, string x_useragent, string id, Accept29? accept, _format29? _format, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (x_Request_ID != null)
                        request_.Headers.TryAddWithoutValidation("X-Request-ID", ConvertToString(x_Request_ID, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_insurantid == null)
                        throw new System.ArgumentNullException("x_insurantid");
                    request_.Headers.TryAddWithoutValidation("x-insurantid", ConvertToString(x_insurantid, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_useragent == null)
                        throw new System.ArgumentNullException("x_useragent");
                    request_.Headers.TryAddWithoutValidation("x-useragent", ConvertToString(x_useragent, System.Globalization.CultureInfo.InvariantCulture));

                    if (accept != null)
                        request_.Headers.TryAddWithoutValidation("Accept", ConvertToString(accept, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "epa/medication/api/v1/fhir/PractitionerRole/{id}"
                    urlBuilder_.Append("epa/medication/api/v1/fhir/PractitionerRole/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('?');
                    if (_format != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("_format")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(_format, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new MedicationServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MedicationServiceException("Invalid request", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MedicationServiceException("Health record is in state UNKNOWN or INITIALIZED", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 410)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MedicationServiceException("Resource was deleted", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 423)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MedicationServiceException("If the insurant objected to the medication process or objected to the submission of prescription and dispensation data into the ePA system, the Medication Service is locked.", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MedicationServiceException("Device registration does not exist", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MedicationServiceException("Health record is in state SUSPENDED", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MedicationServiceException("Any other error", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MedicationServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// History of a specific PractitionerRole
        /// </summary>
        /// <param name="x_Request_ID">UUID of the request message</param>
        /// <param name="x_insurantid">Health Record Identifier</param>
        /// <param name="x_useragent">user agent information</param>
        /// <param name="id">Resource ID</param>
        /// <param name="accept">The Accept header indicates the format in which the client wishes to receive the FHIR response — supported values are application/fhir+json and application/fhir+xml</param>
        /// <param name="_format">Specify alternative response formats by their MIME-types (when a client is unable acccess accept: header)</param>
        /// <param name="_count">With _count, the client can specify the maximum number of elements to be included on one page of the response. This means the Medication Service limits the result set to this maximum specified number. If no value for _count is provided, the default value set is 25.</param>
        /// <param name="_offset">This URL parameter indicates the (zero-based) offset of the first returned element in the collection. If no value for _offset is provided, the default value set is 0.</param>
        /// <param name="_total">This parameter controls whether and how the AuditEvent Service returns the total number of search results.</param>
        /// <returns>History retrieved</returns>
        /// <exception cref="MedicationServiceException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<object> History17Async(System.Guid? x_Request_ID, string x_insurantid, string x_useragent, string id, Accept30? accept, _format30? _format, string _count, int? _offset, string _total)
        {
            return History17Async(x_Request_ID, x_insurantid, x_useragent, id, accept, _format, _count, _offset, _total, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// History of a specific PractitionerRole
        /// </summary>
        /// <param name="x_Request_ID">UUID of the request message</param>
        /// <param name="x_insurantid">Health Record Identifier</param>
        /// <param name="x_useragent">user agent information</param>
        /// <param name="id">Resource ID</param>
        /// <param name="accept">The Accept header indicates the format in which the client wishes to receive the FHIR response — supported values are application/fhir+json and application/fhir+xml</param>
        /// <param name="_format">Specify alternative response formats by their MIME-types (when a client is unable acccess accept: header)</param>
        /// <param name="_count">With _count, the client can specify the maximum number of elements to be included on one page of the response. This means the Medication Service limits the result set to this maximum specified number. If no value for _count is provided, the default value set is 25.</param>
        /// <param name="_offset">This URL parameter indicates the (zero-based) offset of the first returned element in the collection. If no value for _offset is provided, the default value set is 0.</param>
        /// <param name="_total">This parameter controls whether and how the AuditEvent Service returns the total number of search results.</param>
        /// <returns>History retrieved</returns>
        /// <exception cref="MedicationServiceException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<object> History17Async(System.Guid? x_Request_ID, string x_insurantid, string x_useragent, string id, Accept30? accept, _format30? _format, string _count, int? _offset, string _total, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (x_Request_ID != null)
                        request_.Headers.TryAddWithoutValidation("X-Request-ID", ConvertToString(x_Request_ID, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_insurantid == null)
                        throw new System.ArgumentNullException("x_insurantid");
                    request_.Headers.TryAddWithoutValidation("x-insurantid", ConvertToString(x_insurantid, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_useragent == null)
                        throw new System.ArgumentNullException("x_useragent");
                    request_.Headers.TryAddWithoutValidation("x-useragent", ConvertToString(x_useragent, System.Globalization.CultureInfo.InvariantCulture));

                    if (accept != null)
                        request_.Headers.TryAddWithoutValidation("Accept", ConvertToString(accept, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "epa/medication/api/v1/fhir/PractitionerRole/{id}/_history"
                    urlBuilder_.Append("epa/medication/api/v1/fhir/PractitionerRole/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/_history");
                    urlBuilder_.Append('?');
                    if (_format != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("_format")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(_format, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (_count != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("_count")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(_count, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (_offset != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("_offset")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(_offset, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (_total != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("_total")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(_total, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new MedicationServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MedicationServiceException("Invalid request", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MedicationServiceException("Health record is in state UNKNOWN or INITIALIZED", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 410)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MedicationServiceException("Resource was deleted", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 423)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MedicationServiceException("If the insurant objected to the medication process or objected to the submission of prescription and dispensation data into the ePA system, the Medication Service is locked.", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MedicationServiceException("Device registration does not exist", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MedicationServiceException("Health record is in state SUSPENDED", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MedicationServiceException("Any other error", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MedicationServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Read version of PractitionerRole
        /// </summary>
        /// <param name="x_Request_ID">UUID of the request message</param>
        /// <param name="x_insurantid">Health Record Identifier</param>
        /// <param name="x_useragent">user agent information</param>
        /// <param name="id">Resource ID</param>
        /// <param name="vid">Version ID</param>
        /// <param name="accept">The Accept header indicates the format in which the client wishes to receive the FHIR response — supported values are application/fhir+json and application/fhir+xml</param>
        /// <param name="_format">Specify alternative response formats by their MIME-types (when a client is unable acccess accept: header)</param>
        /// <returns>PractitionerRole version read</returns>
        /// <exception cref="MedicationServiceException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<object> History18Async(System.Guid? x_Request_ID, string x_insurantid, string x_useragent, string id, string vid, Accept31? accept, _format31? _format)
        {
            return History18Async(x_Request_ID, x_insurantid, x_useragent, id, vid, accept, _format, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Read version of PractitionerRole
        /// </summary>
        /// <param name="x_Request_ID">UUID of the request message</param>
        /// <param name="x_insurantid">Health Record Identifier</param>
        /// <param name="x_useragent">user agent information</param>
        /// <param name="id">Resource ID</param>
        /// <param name="vid">Version ID</param>
        /// <param name="accept">The Accept header indicates the format in which the client wishes to receive the FHIR response — supported values are application/fhir+json and application/fhir+xml</param>
        /// <param name="_format">Specify alternative response formats by their MIME-types (when a client is unable acccess accept: header)</param>
        /// <returns>PractitionerRole version read</returns>
        /// <exception cref="MedicationServiceException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<object> History18Async(System.Guid? x_Request_ID, string x_insurantid, string x_useragent, string id, string vid, Accept31? accept, _format31? _format, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            if (vid == null)
                throw new System.ArgumentNullException("vid");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (x_Request_ID != null)
                        request_.Headers.TryAddWithoutValidation("X-Request-ID", ConvertToString(x_Request_ID, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_insurantid == null)
                        throw new System.ArgumentNullException("x_insurantid");
                    request_.Headers.TryAddWithoutValidation("x-insurantid", ConvertToString(x_insurantid, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_useragent == null)
                        throw new System.ArgumentNullException("x_useragent");
                    request_.Headers.TryAddWithoutValidation("x-useragent", ConvertToString(x_useragent, System.Globalization.CultureInfo.InvariantCulture));

                    if (accept != null)
                        request_.Headers.TryAddWithoutValidation("Accept", ConvertToString(accept, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "epa/medication/api/v1/fhir/PractitionerRole/{id}/_history/{vid}"
                    urlBuilder_.Append("epa/medication/api/v1/fhir/PractitionerRole/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/_history/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(vid, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('?');
                    if (_format != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("_format")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(_format, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new MedicationServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MedicationServiceException("Invalid request", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MedicationServiceException("Health record is in state UNKNOWN or INITIALIZED", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 410)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MedicationServiceException("Resource was deleted", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 423)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MedicationServiceException("If the insurant objected to the medication process or objected to the submission of prescription and dispensation data into the ePA system, the Medication Service is locked.", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MedicationServiceException("Device registration does not exist", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MedicationServiceException("Health record is in state SUSPENDED", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MedicationServiceException("Any other error", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MedicationServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// System-level FHIR Operation $provide-prescription-erp
        /// </summary>
        /// <param name="x_Request_ID">UUID of the request message</param>
        /// <param name="x_insurantid">Health Record Identifier</param>
        /// <param name="x_useragent">user agent information</param>
        /// <returns>Successful operation</returns>
        /// <exception cref="MedicationServiceException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<object> ProvidePrescriptionErpAsync(System.Guid? x_Request_ID, string x_insurantid, string x_useragent, object body)
        {
            return ProvidePrescriptionErpAsync(x_Request_ID, x_insurantid, x_useragent, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// System-level FHIR Operation $provide-prescription-erp
        /// </summary>
        /// <param name="x_Request_ID">UUID of the request message</param>
        /// <param name="x_insurantid">Health Record Identifier</param>
        /// <param name="x_useragent">user agent information</param>
        /// <returns>Successful operation</returns>
        /// <exception cref="MedicationServiceException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<object> ProvidePrescriptionErpAsync(System.Guid? x_Request_ID, string x_insurantid, string x_useragent, object body, System.Threading.CancellationToken cancellationToken)
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (x_Request_ID != null)
                        request_.Headers.TryAddWithoutValidation("X-Request-ID", ConvertToString(x_Request_ID, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_insurantid == null)
                        throw new System.ArgumentNullException("x_insurantid");
                    request_.Headers.TryAddWithoutValidation("x-insurantid", ConvertToString(x_insurantid, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_useragent == null)
                        throw new System.ArgumentNullException("x_useragent");
                    request_.Headers.TryAddWithoutValidation("x-useragent", ConvertToString(x_useragent, System.Globalization.CultureInfo.InvariantCulture));
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/fhir+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/fhir+json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "epa/medication/api/v1/fhir/provide-prescription-erp"
                    urlBuilder_.Append("epa/medication/api/v1/fhir/provide-prescription-erp");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new MedicationServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MedicationServiceException("Device registration does not exist", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MedicationServiceException("Health record is in state UNKNOWN or INITIALIZED", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MedicationServiceException("Health record is in state SUSPENDED", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MedicationServiceException("Any other error", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MedicationServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// System-level FHIR Operation $cancel-prescription-erp
        /// </summary>
        /// <param name="x_Request_ID">UUID of the request message</param>
        /// <param name="x_insurantid">Health Record Identifier</param>
        /// <param name="x_useragent">user agent information</param>
        /// <returns>Successful operation</returns>
        /// <exception cref="MedicationServiceException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<object> CancelPrescriptionErpAsync(System.Guid? x_Request_ID, string x_insurantid, string x_useragent, object body)
        {
            return CancelPrescriptionErpAsync(x_Request_ID, x_insurantid, x_useragent, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// System-level FHIR Operation $cancel-prescription-erp
        /// </summary>
        /// <param name="x_Request_ID">UUID of the request message</param>
        /// <param name="x_insurantid">Health Record Identifier</param>
        /// <param name="x_useragent">user agent information</param>
        /// <returns>Successful operation</returns>
        /// <exception cref="MedicationServiceException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<object> CancelPrescriptionErpAsync(System.Guid? x_Request_ID, string x_insurantid, string x_useragent, object body, System.Threading.CancellationToken cancellationToken)
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (x_Request_ID != null)
                        request_.Headers.TryAddWithoutValidation("X-Request-ID", ConvertToString(x_Request_ID, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_insurantid == null)
                        throw new System.ArgumentNullException("x_insurantid");
                    request_.Headers.TryAddWithoutValidation("x-insurantid", ConvertToString(x_insurantid, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_useragent == null)
                        throw new System.ArgumentNullException("x_useragent");
                    request_.Headers.TryAddWithoutValidation("x-useragent", ConvertToString(x_useragent, System.Globalization.CultureInfo.InvariantCulture));
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/fhir+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/fhir+json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "epa/medication/api/v1/fhir/cancel-prescription-erp"
                    urlBuilder_.Append("epa/medication/api/v1/fhir/cancel-prescription-erp");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new MedicationServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MedicationServiceException("Device registration does not exist", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MedicationServiceException("Health record is in state UNKNOWN or INITIALIZED", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MedicationServiceException("Health record is in state SUSPENDED", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MedicationServiceException("Any other error", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MedicationServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// System-level FHIR Operation $provide-dispensation-erp
        /// </summary>
        /// <param name="x_Request_ID">UUID of the request message</param>
        /// <param name="x_insurantid">Health Record Identifier</param>
        /// <param name="x_useragent">user agent information</param>
        /// <returns>Successful operation</returns>
        /// <exception cref="MedicationServiceException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<object> ProvideDispensationErpAsync(System.Guid? x_Request_ID, string x_insurantid, string x_useragent, object body)
        {
            return ProvideDispensationErpAsync(x_Request_ID, x_insurantid, x_useragent, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// System-level FHIR Operation $provide-dispensation-erp
        /// </summary>
        /// <param name="x_Request_ID">UUID of the request message</param>
        /// <param name="x_insurantid">Health Record Identifier</param>
        /// <param name="x_useragent">user agent information</param>
        /// <returns>Successful operation</returns>
        /// <exception cref="MedicationServiceException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<object> ProvideDispensationErpAsync(System.Guid? x_Request_ID, string x_insurantid, string x_useragent, object body, System.Threading.CancellationToken cancellationToken)
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (x_Request_ID != null)
                        request_.Headers.TryAddWithoutValidation("X-Request-ID", ConvertToString(x_Request_ID, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_insurantid == null)
                        throw new System.ArgumentNullException("x_insurantid");
                    request_.Headers.TryAddWithoutValidation("x-insurantid", ConvertToString(x_insurantid, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_useragent == null)
                        throw new System.ArgumentNullException("x_useragent");
                    request_.Headers.TryAddWithoutValidation("x-useragent", ConvertToString(x_useragent, System.Globalization.CultureInfo.InvariantCulture));
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/fhir+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/fhir+json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "epa/medication/api/v1/fhir/provide-dispensation-erp"
                    urlBuilder_.Append("epa/medication/api/v1/fhir/provide-dispensation-erp");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new MedicationServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MedicationServiceException("Device registration does not exist", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MedicationServiceException("Health record is in state UNKNOWN or INITIALIZED", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MedicationServiceException("Health record is in state SUSPENDED", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MedicationServiceException("Any other error", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MedicationServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// System-level FHIR Operation $cancel-dispensation-erp
        /// </summary>
        /// <param name="x_Request_ID">UUID of the request message</param>
        /// <param name="x_insurantid">Health Record Identifier</param>
        /// <param name="x_useragent">user agent information</param>
        /// <returns>Successful operation</returns>
        /// <exception cref="MedicationServiceException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<object> CancelDispensationErpAsync(System.Guid? x_Request_ID, string x_insurantid, string x_useragent, object body)
        {
            return CancelDispensationErpAsync(x_Request_ID, x_insurantid, x_useragent, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// System-level FHIR Operation $cancel-dispensation-erp
        /// </summary>
        /// <param name="x_Request_ID">UUID of the request message</param>
        /// <param name="x_insurantid">Health Record Identifier</param>
        /// <param name="x_useragent">user agent information</param>
        /// <returns>Successful operation</returns>
        /// <exception cref="MedicationServiceException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<object> CancelDispensationErpAsync(System.Guid? x_Request_ID, string x_insurantid, string x_useragent, object body, System.Threading.CancellationToken cancellationToken)
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (x_Request_ID != null)
                        request_.Headers.TryAddWithoutValidation("X-Request-ID", ConvertToString(x_Request_ID, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_insurantid == null)
                        throw new System.ArgumentNullException("x_insurantid");
                    request_.Headers.TryAddWithoutValidation("x-insurantid", ConvertToString(x_insurantid, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_useragent == null)
                        throw new System.ArgumentNullException("x_useragent");
                    request_.Headers.TryAddWithoutValidation("x-useragent", ConvertToString(x_useragent, System.Globalization.CultureInfo.InvariantCulture));
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/fhir+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/fhir+json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "epa/medication/api/v1/fhir/cancel-dispensation-erp"
                    urlBuilder_.Append("epa/medication/api/v1/fhir/cancel-dispensation-erp");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new MedicationServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MedicationServiceException("Device registration does not exist", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MedicationServiceException("Health record is in state UNKNOWN or INITIALIZED", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MedicationServiceException("Health record is in state SUSPENDED", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MedicationServiceException("Any other error", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MedicationServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// System-level FHIR Operation $medication-list
        /// </summary>
        /// <param name="x_Request_ID">UUID of the request message</param>
        /// <param name="x_insurantid">Health Record Identifier</param>
        /// <param name="x_useragent">user agent information</param>
        /// <param name="accept">The Accept header indicates the format in which the client wishes to receive the FHIR response — supported values are application/fhir+json and application/fhir+xml</param>
        /// <param name="_format">Specify alternative response formats by their MIME-types (when a client is unable acccess accept: header)</param>
        /// <param name="date">Limit the search to this date. Can specify upper or lower limits and periods by providing an upper and a lower limit.</param>
        /// <param name="_count">Limit the result bundle to this many entries. To get more entries request the next page.</param>
        /// <param name="_offset">Defines the offset of the first entry in the collection.</param>
        /// <returns>Successful operation</returns>
        /// <exception cref="MedicationServiceException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<object> MedicationListAsync(System.Guid? x_Request_ID, string x_insurantid, string x_useragent, Accept32? accept, _format32? _format, string date, int? _count, int? _offset)
        {
            return MedicationListAsync(x_Request_ID, x_insurantid, x_useragent, accept, _format, date, _count, _offset, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// System-level FHIR Operation $medication-list
        /// </summary>
        /// <param name="x_Request_ID">UUID of the request message</param>
        /// <param name="x_insurantid">Health Record Identifier</param>
        /// <param name="x_useragent">user agent information</param>
        /// <param name="accept">The Accept header indicates the format in which the client wishes to receive the FHIR response — supported values are application/fhir+json and application/fhir+xml</param>
        /// <param name="_format">Specify alternative response formats by their MIME-types (when a client is unable acccess accept: header)</param>
        /// <param name="date">Limit the search to this date. Can specify upper or lower limits and periods by providing an upper and a lower limit.</param>
        /// <param name="_count">Limit the result bundle to this many entries. To get more entries request the next page.</param>
        /// <param name="_offset">Defines the offset of the first entry in the collection.</param>
        /// <returns>Successful operation</returns>
        /// <exception cref="MedicationServiceException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<object> MedicationListAsync(System.Guid? x_Request_ID, string x_insurantid, string x_useragent, Accept32? accept, _format32? _format, string date, int? _count, int? _offset, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (x_Request_ID != null)
                        request_.Headers.TryAddWithoutValidation("X-Request-ID", ConvertToString(x_Request_ID, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_insurantid == null)
                        throw new System.ArgumentNullException("x_insurantid");
                    request_.Headers.TryAddWithoutValidation("x-insurantid", ConvertToString(x_insurantid, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_useragent == null)
                        throw new System.ArgumentNullException("x_useragent");
                    request_.Headers.TryAddWithoutValidation("x-useragent", ConvertToString(x_useragent, System.Globalization.CultureInfo.InvariantCulture));

                    if (accept != null)
                        request_.Headers.TryAddWithoutValidation("Accept", ConvertToString(accept, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "epa/medication/api/v1/fhir/medication-list"
                    urlBuilder_.Append("epa/medication/api/v1/fhir/medication-list");
                    urlBuilder_.Append('?');
                    if (_format != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("_format")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(_format, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (date != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("date")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(date, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (_count != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("_count")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(_count, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (_offset != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("_offset")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(_offset, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new MedicationServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MedicationServiceException("Invalid request", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MedicationServiceException("Health record is in state UNKNOWN or INITIALIZED", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MedicationServiceException("Device registration does not exist", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MedicationServiceException("Health record is in state SUSPENDED", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MedicationServiceException("Any other error", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MedicationServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="x_Request_ID">UUID of the request message</param>
        /// <param name="x_insurantid">Health Record Identifier</param>
        /// <param name="x_useragent">user agent information</param>
        /// <returns>OK</returns>
        /// <exception cref="MedicationServiceException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<string> RenderEMLAsHTMLAsync(System.Guid? x_Request_ID, string x_insurantid, string x_useragent)
        {
            return RenderEMLAsHTMLAsync(x_Request_ID, x_insurantid, x_useragent, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="x_Request_ID">UUID of the request message</param>
        /// <param name="x_insurantid">Health Record Identifier</param>
        /// <param name="x_useragent">user agent information</param>
        /// <returns>OK</returns>
        /// <exception cref="MedicationServiceException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<string> RenderEMLAsHTMLAsync(System.Guid? x_Request_ID, string x_insurantid, string x_useragent, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (x_Request_ID != null)
                        request_.Headers.TryAddWithoutValidation("X-Request-ID", ConvertToString(x_Request_ID, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_insurantid == null)
                        throw new System.ArgumentNullException("x_insurantid");
                    request_.Headers.TryAddWithoutValidation("x-insurantid", ConvertToString(x_insurantid, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_useragent == null)
                        throw new System.ArgumentNullException("x_useragent");
                    request_.Headers.TryAddWithoutValidation("x-useragent", ConvertToString(x_useragent, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/html"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "epa/medication/render/v1/eml/xhtml"
                    urlBuilder_.Append("epa/medication/render/v1/eml/xhtml");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<string>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new MedicationServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MedicationServiceException("Health record is in state UNKNOWN or INITIALIZED", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new MedicationServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new MedicationServiceException<object>("Unknown or invalid search parameter(s)", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MedicationServiceException("Device registration does not exist", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MedicationServiceException("Health record is in state SUSPENDED", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MedicationServiceException("Any other error", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MedicationServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="x_Request_ID">UUID of the request message</param>
        /// <param name="x_insurantid">Health Record Identifier</param>
        /// <param name="x_useragent">user agent information</param>
        /// <returns>OK</returns>
        /// <exception cref="MedicationServiceException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<FileResponse> RenderEMLAsPDFAsync(System.Guid? x_Request_ID, string x_insurantid, string x_useragent)
        {
            return RenderEMLAsPDFAsync(x_Request_ID, x_insurantid, x_useragent, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="x_Request_ID">UUID of the request message</param>
        /// <param name="x_insurantid">Health Record Identifier</param>
        /// <param name="x_useragent">user agent information</param>
        /// <returns>OK</returns>
        /// <exception cref="MedicationServiceException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<FileResponse> RenderEMLAsPDFAsync(System.Guid? x_Request_ID, string x_insurantid, string x_useragent, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (x_Request_ID != null)
                        request_.Headers.TryAddWithoutValidation("X-Request-ID", ConvertToString(x_Request_ID, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_insurantid == null)
                        throw new System.ArgumentNullException("x_insurantid");
                    request_.Headers.TryAddWithoutValidation("x-insurantid", ConvertToString(x_insurantid, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_useragent == null)
                        throw new System.ArgumentNullException("x_useragent");
                    request_.Headers.TryAddWithoutValidation("x-useragent", ConvertToString(x_useragent, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/pdf"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "epa/medication/render/v1/eml/pdf"
                    urlBuilder_.Append("epa/medication/render/v1/eml/pdf");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200 || status_ == 206)
                        {
                            var responseStream_ = response_.Content == null ? System.IO.Stream.Null : await response_.Content.ReadAsStreamAsync().ConfigureAwait(false);
                            var fileResponse_ = new FileResponse(status_, headers_, responseStream_, null, response_);
                            disposeClient_ = false; disposeResponse_ = false; // response and client are disposed by FileResponse
                            return fileResponse_;
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MedicationServiceException("Health record is in state UNKNOWN or INITIALIZED", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new MedicationServiceException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new MedicationServiceException<object>("Unknown or invalid search parameter(s)", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MedicationServiceException("Device registration does not exist", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MedicationServiceException("Health record is in state SUSPENDED", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MedicationServiceException("Any other error", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new MedicationServiceException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = System.Text.Json.JsonSerializer.Deserialize<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new MedicationServiceException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    {
                        var typedBody = await System.Text.Json.JsonSerializer.DeserializeAsync<T>(responseStream, JsonSerializerSettings, cancellationToken).ConfigureAwait(false);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new MedicationServiceException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value is string[])
            {
                return string.Join(",", (string[])value);
            }
            else if (value.GetType().IsArray)
            {
                var valueArray = (System.Array)value;
                var valueTextArray = new string[valueArray.Length];
                for (var i = 0; i < valueArray.Length; i++)
                {
                    valueTextArray[i] = ConvertToString(valueArray.GetValue(i), cultureInfo);
                }
                return string.Join(",", valueTextArray);
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Accept
    {

        [System.Runtime.Serialization.EnumMember(Value = @"application/fhir+json")]
        Application_fhir_json = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"application/fhir+xml")]
        Application_fhir_xml = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum _format
    {

        [System.Runtime.Serialization.EnumMember(Value = @"application/fhir+json")]
        Application_fhir_json = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"application/fhir+xml")]
        Application_fhir_xml = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Accept2
    {

        [System.Runtime.Serialization.EnumMember(Value = @"application/fhir+json")]
        Application_fhir_json = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"application/fhir+xml")]
        Application_fhir_xml = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum _format2
    {

        [System.Runtime.Serialization.EnumMember(Value = @"application/fhir+json")]
        Application_fhir_json = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"application/fhir+xml")]
        Application_fhir_xml = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Accept3
    {

        [System.Runtime.Serialization.EnumMember(Value = @"application/fhir+json")]
        Application_fhir_json = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"application/fhir+xml")]
        Application_fhir_xml = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum _format3
    {

        [System.Runtime.Serialization.EnumMember(Value = @"application/fhir+json")]
        Application_fhir_json = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"application/fhir+xml")]
        Application_fhir_xml = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Accept4
    {

        [System.Runtime.Serialization.EnumMember(Value = @"application/fhir+json")]
        Application_fhir_json = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"application/fhir+xml")]
        Application_fhir_xml = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum _format4
    {

        [System.Runtime.Serialization.EnumMember(Value = @"application/fhir+json")]
        Application_fhir_json = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"application/fhir+xml")]
        Application_fhir_xml = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Accept5
    {

        [System.Runtime.Serialization.EnumMember(Value = @"application/fhir+json")]
        Application_fhir_json = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"application/fhir+xml")]
        Application_fhir_xml = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum _format5
    {

        [System.Runtime.Serialization.EnumMember(Value = @"application/fhir+json")]
        Application_fhir_json = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"application/fhir+xml")]
        Application_fhir_xml = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Accept6
    {

        [System.Runtime.Serialization.EnumMember(Value = @"application/fhir+json")]
        Application_fhir_json = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"application/fhir+xml")]
        Application_fhir_xml = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum _format6
    {

        [System.Runtime.Serialization.EnumMember(Value = @"application/fhir+json")]
        Application_fhir_json = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"application/fhir+xml")]
        Application_fhir_xml = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Accept7
    {

        [System.Runtime.Serialization.EnumMember(Value = @"application/fhir+json")]
        Application_fhir_json = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"application/fhir+xml")]
        Application_fhir_xml = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum _format7
    {

        [System.Runtime.Serialization.EnumMember(Value = @"application/fhir+json")]
        Application_fhir_json = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"application/fhir+xml")]
        Application_fhir_xml = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Accept8
    {

        [System.Runtime.Serialization.EnumMember(Value = @"application/fhir+json")]
        Application_fhir_json = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"application/fhir+xml")]
        Application_fhir_xml = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum _format8
    {

        [System.Runtime.Serialization.EnumMember(Value = @"application/fhir+json")]
        Application_fhir_json = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"application/fhir+xml")]
        Application_fhir_xml = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Accept9
    {

        [System.Runtime.Serialization.EnumMember(Value = @"application/fhir+json")]
        Application_fhir_json = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"application/fhir+xml")]
        Application_fhir_xml = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum _format9
    {

        [System.Runtime.Serialization.EnumMember(Value = @"application/fhir+json")]
        Application_fhir_json = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"application/fhir+xml")]
        Application_fhir_xml = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Accept10
    {

        [System.Runtime.Serialization.EnumMember(Value = @"application/fhir+json")]
        Application_fhir_json = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"application/fhir+xml")]
        Application_fhir_xml = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum _format10
    {

        [System.Runtime.Serialization.EnumMember(Value = @"application/fhir+json")]
        Application_fhir_json = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"application/fhir+xml")]
        Application_fhir_xml = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Accept11
    {

        [System.Runtime.Serialization.EnumMember(Value = @"application/fhir+json")]
        Application_fhir_json = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"application/fhir+xml")]
        Application_fhir_xml = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum _format11
    {

        [System.Runtime.Serialization.EnumMember(Value = @"application/fhir+json")]
        Application_fhir_json = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"application/fhir+xml")]
        Application_fhir_xml = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Accept12
    {

        [System.Runtime.Serialization.EnumMember(Value = @"application/fhir+json")]
        Application_fhir_json = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"application/fhir+xml")]
        Application_fhir_xml = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum _format12
    {

        [System.Runtime.Serialization.EnumMember(Value = @"application/fhir+json")]
        Application_fhir_json = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"application/fhir+xml")]
        Application_fhir_xml = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Accept13
    {

        [System.Runtime.Serialization.EnumMember(Value = @"application/fhir+json")]
        Application_fhir_json = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"application/fhir+xml")]
        Application_fhir_xml = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum _format13
    {

        [System.Runtime.Serialization.EnumMember(Value = @"application/fhir+json")]
        Application_fhir_json = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"application/fhir+xml")]
        Application_fhir_xml = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Accept14
    {

        [System.Runtime.Serialization.EnumMember(Value = @"application/fhir+json")]
        Application_fhir_json = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"application/fhir+xml")]
        Application_fhir_xml = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum _format14
    {

        [System.Runtime.Serialization.EnumMember(Value = @"application/fhir+json")]
        Application_fhir_json = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"application/fhir+xml")]
        Application_fhir_xml = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Accept15
    {

        [System.Runtime.Serialization.EnumMember(Value = @"application/fhir+json")]
        Application_fhir_json = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"application/fhir+xml")]
        Application_fhir_xml = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum _format15
    {

        [System.Runtime.Serialization.EnumMember(Value = @"application/fhir+json")]
        Application_fhir_json = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"application/fhir+xml")]
        Application_fhir_xml = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Accept16
    {

        [System.Runtime.Serialization.EnumMember(Value = @"application/fhir+json")]
        Application_fhir_json = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"application/fhir+xml")]
        Application_fhir_xml = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum _format16
    {

        [System.Runtime.Serialization.EnumMember(Value = @"application/fhir+json")]
        Application_fhir_json = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"application/fhir+xml")]
        Application_fhir_xml = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Accept17
    {

        [System.Runtime.Serialization.EnumMember(Value = @"application/fhir+json")]
        Application_fhir_json = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"application/fhir+xml")]
        Application_fhir_xml = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum _format17
    {

        [System.Runtime.Serialization.EnumMember(Value = @"application/fhir+json")]
        Application_fhir_json = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"application/fhir+xml")]
        Application_fhir_xml = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Accept18
    {

        [System.Runtime.Serialization.EnumMember(Value = @"application/fhir+json")]
        Application_fhir_json = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"application/fhir+xml")]
        Application_fhir_xml = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum _format18
    {

        [System.Runtime.Serialization.EnumMember(Value = @"application/fhir+json")]
        Application_fhir_json = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"application/fhir+xml")]
        Application_fhir_xml = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Accept19
    {

        [System.Runtime.Serialization.EnumMember(Value = @"application/fhir+json")]
        Application_fhir_json = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"application/fhir+xml")]
        Application_fhir_xml = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum _format19
    {

        [System.Runtime.Serialization.EnumMember(Value = @"application/fhir+json")]
        Application_fhir_json = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"application/fhir+xml")]
        Application_fhir_xml = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Accept20
    {

        [System.Runtime.Serialization.EnumMember(Value = @"application/fhir+json")]
        Application_fhir_json = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"application/fhir+xml")]
        Application_fhir_xml = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum _format20
    {

        [System.Runtime.Serialization.EnumMember(Value = @"application/fhir+json")]
        Application_fhir_json = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"application/fhir+xml")]
        Application_fhir_xml = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Accept21
    {

        [System.Runtime.Serialization.EnumMember(Value = @"application/fhir+json")]
        Application_fhir_json = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"application/fhir+xml")]
        Application_fhir_xml = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum _format21
    {

        [System.Runtime.Serialization.EnumMember(Value = @"application/fhir+json")]
        Application_fhir_json = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"application/fhir+xml")]
        Application_fhir_xml = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Accept22
    {

        [System.Runtime.Serialization.EnumMember(Value = @"application/fhir+json")]
        Application_fhir_json = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"application/fhir+xml")]
        Application_fhir_xml = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum _format22
    {

        [System.Runtime.Serialization.EnumMember(Value = @"application/fhir+json")]
        Application_fhir_json = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"application/fhir+xml")]
        Application_fhir_xml = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Accept23
    {

        [System.Runtime.Serialization.EnumMember(Value = @"application/fhir+json")]
        Application_fhir_json = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"application/fhir+xml")]
        Application_fhir_xml = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum _format23
    {

        [System.Runtime.Serialization.EnumMember(Value = @"application/fhir+json")]
        Application_fhir_json = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"application/fhir+xml")]
        Application_fhir_xml = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Accept24
    {

        [System.Runtime.Serialization.EnumMember(Value = @"application/fhir+json")]
        Application_fhir_json = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"application/fhir+xml")]
        Application_fhir_xml = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum _format24
    {

        [System.Runtime.Serialization.EnumMember(Value = @"application/fhir+json")]
        Application_fhir_json = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"application/fhir+xml")]
        Application_fhir_xml = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Accept25
    {

        [System.Runtime.Serialization.EnumMember(Value = @"application/fhir+json")]
        Application_fhir_json = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"application/fhir+xml")]
        Application_fhir_xml = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum _format25
    {

        [System.Runtime.Serialization.EnumMember(Value = @"application/fhir+json")]
        Application_fhir_json = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"application/fhir+xml")]
        Application_fhir_xml = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Accept26
    {

        [System.Runtime.Serialization.EnumMember(Value = @"application/fhir+json")]
        Application_fhir_json = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"application/fhir+xml")]
        Application_fhir_xml = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum _format26
    {

        [System.Runtime.Serialization.EnumMember(Value = @"application/fhir+json")]
        Application_fhir_json = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"application/fhir+xml")]
        Application_fhir_xml = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Accept27
    {

        [System.Runtime.Serialization.EnumMember(Value = @"application/fhir+json")]
        Application_fhir_json = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"application/fhir+xml")]
        Application_fhir_xml = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum _format27
    {

        [System.Runtime.Serialization.EnumMember(Value = @"application/fhir+json")]
        Application_fhir_json = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"application/fhir+xml")]
        Application_fhir_xml = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Accept28
    {

        [System.Runtime.Serialization.EnumMember(Value = @"application/fhir+json")]
        Application_fhir_json = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"application/fhir+xml")]
        Application_fhir_xml = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum _format28
    {

        [System.Runtime.Serialization.EnumMember(Value = @"application/fhir+json")]
        Application_fhir_json = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"application/fhir+xml")]
        Application_fhir_xml = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Accept29
    {

        [System.Runtime.Serialization.EnumMember(Value = @"application/fhir+json")]
        Application_fhir_json = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"application/fhir+xml")]
        Application_fhir_xml = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum _format29
    {

        [System.Runtime.Serialization.EnumMember(Value = @"application/fhir+json")]
        Application_fhir_json = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"application/fhir+xml")]
        Application_fhir_xml = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Accept30
    {

        [System.Runtime.Serialization.EnumMember(Value = @"application/fhir+json")]
        Application_fhir_json = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"application/fhir+xml")]
        Application_fhir_xml = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum _format30
    {

        [System.Runtime.Serialization.EnumMember(Value = @"application/fhir+json")]
        Application_fhir_json = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"application/fhir+xml")]
        Application_fhir_xml = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Accept31
    {

        [System.Runtime.Serialization.EnumMember(Value = @"application/fhir+json")]
        Application_fhir_json = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"application/fhir+xml")]
        Application_fhir_xml = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum _format31
    {

        [System.Runtime.Serialization.EnumMember(Value = @"application/fhir+json")]
        Application_fhir_json = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"application/fhir+xml")]
        Application_fhir_xml = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Accept32
    {

        [System.Runtime.Serialization.EnumMember(Value = @"application/fhir+json")]
        Application_fhir_json = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"application/fhir+xml")]
        Application_fhir_xml = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum _format32
    {

        [System.Runtime.Serialization.EnumMember(Value = @"application/fhir+json")]
        Application_fhir_json = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"application/fhir+xml")]
        Application_fhir_xml = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FileResponse : System.IDisposable
    {
        private System.IDisposable _client;
        private System.IDisposable _response;

        public int StatusCode { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public System.IO.Stream Stream { get; private set; }

        public bool IsPartial
        {
            get { return StatusCode == 206; }
        }

        public FileResponse(int statusCode, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.IO.Stream stream, System.IDisposable client, System.IDisposable response)
        {
            StatusCode = statusCode;
            Headers = headers;
            Stream = stream;
            _client = client;
            _response = response;
        }

        public void Dispose()
        {
            Stream.Dispose();
            if (_response != null)
                _response.Dispose();
            if (_client != null)
                _client.Dispose();
        }
    }


    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MedicationServiceException : System.Exception
    {
        public int StatusCode { get; private set; }

        public string Response { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public MedicationServiceException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception innerException)
            : base(message + "\n\nStatus: " + statusCode + "\nResponse: \n" + ((response == null) ? "(null)" : response.Substring(0, response.Length >= 512 ? 512 : response.Length)), innerException)
        {
            StatusCode = statusCode;
            Response = response;
            Headers = headers;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MedicationServiceException<TResult> : MedicationServiceException
    {
        public TResult Result { get; private set; }

        public MedicationServiceException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception innerException)
            : base(message, statusCode, response, headers, innerException)
        {
            Result = result;
        }
    }

}

#pragma warning restore  108
#pragma warning restore  114
#pragma warning restore  472
#pragma warning restore  612
#pragma warning restore 1573
#pragma warning restore 1591
#pragma warning restore 8073
#pragma warning restore 3016
#pragma warning restore 8600
#pragma warning restore 8602
#pragma warning restore 8603
#pragma warning restore 8604
#pragma warning restore 8625